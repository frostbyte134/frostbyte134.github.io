scripts

grep 파일명 : 파일 내부 검사
-i : case insensitive
-n : 줄번호 표시
-v : 패턴을 제외한 내용
-c : 매칭 라인 수
-l : 매칭 패턴이 

find [경로] [조건] [아규먼트 = 조건에 맞는 값] [행동 = 검색 결과를 어떻게 처리할 것인지]
행동 = 지정x시 print실행됨

find / -name file -exec -rm -f {} |;


링크 - ln명령어로 만듬

하드링크
- HDD상의 위치 (byte position?)을 가르키는 파일
- `ls -al` 시, 파일 이름으로 뜸
- 하드링크 파일 : 아이노드 번호가 전부 동일

심볼릭 링크
- 윈도우의 바로가기와 비슷. "디스크의 위치/파일을 가르키는 것이 아니라, 파일시스템 상의 특정 파일을 가르키는 것". 하드링크를 참조함?
- `ls -al` 시, `/bin/link -> /usr/bin` 등으로 나옴
- 아이노드 번호가 가르키는 파일과 다름
- 원본 파일을 찾아 가서 (dentry 참조. 원본 파일이 지워졌다가 생겨도 ok), 그 원본이 가르키는 위치를 참조함
- 상대경로로 만든 심볼릭 링크를 다른곳으로 옮김 : 그곳의 위치기반으로 참조시도

`ln [옵션 = 심볼릭 링크 생성 등] [원본] [링크]`
- `-s` : 심볼릭 링크

ls -l의 2nd column (숫자) : 하드링크의 수

ls -i : 아이노드 번호 확인

vfs상의 무엇을 가르키는 거지?



쉘 
- * : 길이제한x
- ? : 문자1개
- ` : ``안의 문자를 명령어로 인식
- ' : ''안의 메타문자를 일반문자로
- " : ""예외 몇게 빼고 '랑 동일
    - ex) `if ["`/usr/bin/id -gn`" = "`/usr/bin/id -un`"]; then`
- $() : 변수
- \[특문] : 특문 기능을 없앰
- `/etc/profile` : 모든 사용자에 다 적용됨
- `~/.bashrc` : bash shell의 사용자 초기화 파일
- umask : 파일 생성 시, 666 & (!umask) 로 권한 부여. 디렉토리는 777과.


생활코딩 리눅스
- `/etc/init.d` : 데몬들이 위치
    - `sudo service 데몬파일명 명령어` 로 명령어 전달 (`service`라는 프로그램으로 우회에서 실행)
- `/etc/rc3.d` : 실행되는 데몬들의 심볼릭 링크가 있음. rc5.d일지도
- `crontab -e` : 일 정의 가능. 에디터가 뜰 것임
- `who` : 현재 접속중인 사용자목록
    - `id` : 본인 유저아이디
- 도메인, DNS
    - DNS 서버에서 google.com을 ip로 변환
    - 로컬에는 `/etc/hosts`파일에 해당 정보가 있음. 우선순위가 높은듯
    - 서버 1개 : 1개 도메인에 매칭
    - domain previx = subdomain
    - `dig +trace egoing.ga` : DNS서버에서 DNS찾는과정 


카카오톡 샵탭
- 대화창 탭 옆에
- 탭을 추가할 수 있는데 이건 뭔 의미지. #코딩 추가해봤더니 다음 검색결과가 떴음

멜론 for u
- 웹페이지에선 공연 플래너? 밖에 안됨


<운영체제 공부한 것 넣기. 이전에는 spinlock, gpio interrupt 추가 -> c10k 공부>
 우선 저는 성실한 성격입니다. 학부시절에는 학과 공부에 집중하였고 그 결과로 졸업 때 학부수석을 할 수 있었습니다. 이런 과정 속에서 분야를 가리지 않고 공부한 것이 현 회사에서의 업무에 많이 도움이 되었습니다. 특히 운영체제는 석사 2년동안 조교도 하고 따로 시간을 내어 공부도 하였고, 결과적으로 가장 쓸모가 있었습니다. 예를 들면 현 회사에서 임베디드 개발을 하라는 말을 들었을 때, 집에서 스스로 비글본 보드의 임베디드 리눅스로 디바이스트리 로딩 부분을 보거나 GPIO ISR을 추가해 봤던 것이 많은 도움이 되었습니다. 이외에도 파이썬의 병목지점을 찾거나 도커를 이해하는 데도 많은 도움이 되었고, 최근에는 spinlock의 구현을 보거나 c10k 문제를 혼자 풀며 소켓을 공부하는 등 계속 시간을 투자하고 있습니다. 

<알고리즘 문제풀이 - 대회우승, 블루>
 그렇다고 학과 공부만 한 것은 아닙니다. 예를 들면 학부 3학년에 문제해결 과목을 수강한 뒤부터 알고리즘 문제풀이를 공부하였고, 얼마 뒤 인터넷 대회 사이트인 Topcoder에서 블루등급을 받을 수 있었습니다. 석사기간에는 도저히 여유가 나지 않아 잠시 멈추었지만 졸업 뒤 여유가 조금 생겨 다시 문제풀이를 시작하였습니다. 그 결과 Codeforces 블루 등급을 받고 사내 알고리즘 대회에서도 1등을 하였습니다. 문제를 풀며 생각을 코드로 바꾸는 것, 코드의 틀린 부분을 찾아내 개선하는 것 등의 훈련이 되었습니다.
 
 <수학 공부, 어디에 도움이 되었는가 - 선형대수 어필>
 그 외에도 학부 시절 높은 학점을 쉽게 받기 힘들 것을 알면서도 응용수학과의 전공과목 2개(수치해석)를 교양학점으로 수강하였고, 석사 때는 수학과의 수치선형대수학 과목을 수강하였습니다. 혼자 선형대수학 등을 공부해오고 있으며, 공부한 내용은 블로그 (frostbyte134.github.io)에 정리하여 주기적으로 복습하고 있습니다. 덕분에 현 회사에서 카메라 지오메트리, 좌표변환 관련 업무를 수행할 때 큰 도움이 되었습니다. 

 잘 돌아가는 코드를 짜는 것만 해도 중요하고 쉽지 않은 일입니다. 하지만 저는 이외에도 코드가 운영체제 밑에서 어떻게 돌아가는지를 알아서 특정 현상의 발생이유나 재현조건을 이해하는 것도 중요하다고 생각합니다. 이 때문에 따로 시간을 내서 운영체제를 공부했습니다. 또한 코드가 어떤 생각을 구현하는지도 아는 것도 중요하다고 생각해서, 알고리즘과 기본적인 수학을 공부해 왔습니다. 지금까지 이 두 가지를 항상 했었고, 앞으로 어떤 업무를 수행하든 계속해 나갈 생각입니다.
---
layout: post
title:  "Memory management of OS"
date:   2020-05-01 09:00:05 +0800
categories: coding
use_math: true
tags: coding C
---

맨날 해깔려서..정리 ㄱㄱ

* jake.dothome.co.kr

<a href="http://www.iamroot.org/xe/index.php?mid=Programming&document_srl=14356" target="_blank">http://www.iamroot.org/xe/index.php?mid=Programming&document_srl=14356</a>
1. 저의 접근이 맞는 것인지 궁금하구요.
2. 만약 malloc()으로 virtual address에 대한 physical mapping이 된다면 이것을 처리해주는 routine이 무엇일까요..?
(적어도 brk() 같은 system call 이나 page fault exception은 아닌 것 같아서 헤깔리네요..ㅠ)

=> 네 맞습니다. linux는 메모리 할당을 최대한 지연시키기 위해 demand paging을 사용합니다.  
user space memory allocator(malloc) 내부에서 free memory chunk을 관리하게 됩니다.  
user가 요청한 메모리 크기를 만족하는 free memory chunk가 없다면 brk() system call을 사용하여 heap을 grow합니다.  
이때 physical 메모리가 바로 할당되는 것이 아니라 VMA(virtual memory area) space 영역의 크기을 늘리기만 합니다.  

이후 user program에서 heap grow된 영역에 접근을 하게되면 page fault가 발생하고 되고,  
linux page fault handler에서 fault address을 체크하여 VMA list을 체크하여 VMA list에 존재하면, 즉 user program에서 사용 요청한 영역이면,  
pyhsical 메모리을 할당하고 page table을 갱신하여 fault가 발생한 위치에서 user program을 다시 시작하게 됩니다.  
만약, VMA list에서 없는 주소이고, user space주소이면 segment fault을, kernel space 주소이면 panic을 발생시키게 됩니다.  


실제로 malloc으로 새로운 virtual space를 할당받은 뒤  
page table을 읽어보면 1개의 page에 대한 physical mapping이 이루어져 있습니다.(read/write를 안했음에도 불구하고)  
예를들어 40KB(10개 page) 공간을 요청하면 처음 4KB(1개 page)에 대해서는 physical mapping이 되어있는 것이 확인됩니다.  

=> 아마 이건 malloc 모듈 내부 구현을 조금 보시면 될것 같은데, 김남형씨 블로그의 glibc 동적 메모리 관리(http://studyfoss.egloos.com/5206220) 부분을 보시면 될것 같습니다.  
(저도 설명할 수 있을 정도로 알고 있는건 아니라서 ㅡ.ㅡ)  
malloc 모듈은 내부적으로 메모리을 chunk 자료구조로 관리하는데 실제 user가 요청하는 메모리 크기 + chunk header가 붙게 됩니다.  

(사실 내부적으로 bins 자료구조로 관리되는데, 복잡하기 때문에 user가 요청한 메모리 크기라고 적었습니다.  
작은 메모리는 고정된 크기, 조금 더 큰 메모리는 tree 구조로, 그리로 특정 thresh hold이상이면 메모리 할당을 mmap() system call을 이용하여 바로 할당하게 됩니다.)  
따라서, malloc호출해서 메모리을 할당하게 되면 chunk header 정보가 설정되기 때문에 write operation이 일어나서  
최초  1 page에 대해서는 physical mapping이 되어있을것으로 생각됩니다.  




* <a href="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/8_MainMemory.html" target="_blank">https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/8_MainMemory.html</a>
* <a href="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/9_VirtualMemory.html" target="_blank">https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/9_VirtualMemory.html</a>

### Copy on write

* <a href="https://en.wikipedia.org/wiki/Copy-on-write#In_virtual_memory_management" target="_blank">https://en.wikipedia.org/wiki/Copy-on-write#In_virtual_memory_management</a>

>  The idea behind a copy-on-write fork is that the pages for a parent process do not have to be actually copied for the child until one or the other of the processes changes the page.


### Demand paging
>  A crucial part of the process is that the instruction must be restarted from scratch once the desired page has been made available in memory

- `=lazy swap-in`. demang paging에도 `page fault`발생. 예를 들면 새 프로그램을 적재할 시, 필요한 메모리 구역과 그 locality만 실제 메모리에 올리고, 나머진 memory commit으로 처리 (fault = software interrupt발생시켜 diskio를 일으켜 처리)

### Memory Commit
`VIRT`: 사용을 예약받은 메모리 (리눅스 기준). malloc()으로 큰 메모리를 잡을 시 생김. 해당 영역에 실제로 access시 `page fault`발생, 인터럽트 - 실제 메모리 할당.  
이거나 디맨드 페이징이나 같은 거 아닌가?

### C data sections

* `.text`: 코드. 바이너리 (컴파일된 기계어).
* `.bss` : 초기값 없는 전역변수. 임베디드 기기를 예로 들면, 메모리 섹션 로딩하면서 0으로 다 초기화됨. static포함. 
* `.data`:  초기값 있는 전역변수 static 포함. ROM등에 초기값이 있어야 함
* `.rodata`: 상수 전역변수 static포함

<a href="http://recipes.egloos.com/5011946" target="_blank">http://recipes.egloos.com/5011946의 내용 추가</a>
* `.symtab` : symbol table이며 , symbol이란 실제 주소를 가질 수 있는 단위를 말합니다. 보통은 전역변수이름과 함수이름
* `.rel.text/data` : relocatable text이며, 말 그대로 op code가 들어 있음 (symbol reference resolving에서 언급한 구멍 난 text - extern 함수 등)
* `.debug` : 이 section이야 말로 -g option에 의한 debug symbol table입니다. 지역, 전역 변수들에 대한 디버깅 심볼
* `.line`: -g option으로 compile했을 때, text section의 opcode와 원본 C의 line을 연결하여, code를 보면서 debugging 가능하게 해줍니다
* `.strtab`:  .symtab와 .debug section에 사용되는 const data인 string등을 가지고 있습니다. 

위 링크에 global symbol이 중복 시에도 컴파일 되는 경우에 대한 설명이 있음

memory `Segment` = \\(\Sigma\\) Sections


### XIP?
- 어디 책에서 flash 에 있는 코드를 실행하는거라고 본 거 같은데...

### mmap
> Rather than accessing data files directly via the file system with every file access, data files can be paged into memory the same as process files, resulting in much faster accesses ( except of course when page-faults occur. ) This is known as memory-mapping a file.

* Basically a file is mapped to an address range within a process's virtual address space, and then paged in as needed using the ordinary demand paging system.

#### Memory-Mapped I/O
* All access to devices is done by writing into ( or reading from ) the device's registers. Normally this is done via special I/O instructions.
* For certain devices it makes sense to simply map the device's registers to addresses in the process's virtual address space, making device I/O as fast and simple as any other memory access. Video controller cards are a classic example of this.
* Serial and parallel devices can also use memory mapped I/O, mapping the device registers to specific memory addresses known as I/O Ports, e.g. `0xF8`. Transferring a series of bytes must be done one at a time, moving only as fast as the I/O device is prepared to process the data, through one of two mechanisms:
    - `Programmed I/O ( PIO )`, also known as `polling`. The CPU periodically checks the control bit on the device, to see if it is ready to handle another byte of data.  
    - `Interrupt Driven`. The device generates an interrupt when it either has another byte of data to deliver or is ready to receive another byte.  


`Volatile`: 생략불가


### Symbol and Linker
<a href="http://recipes.egloos.com/5009181" target="_blank">http://recipes.egloos.com/5009181</a>
- `symbol`: 링커가 식별할 수 있는 최소 단위. 자신만의 주소를 가짐. 컴파일/링크의 기본 단위
- `ELF objfile`내에 symbol table보유
- 심볼의 내용이 그대로 메모리에 적재되지는 않음. 바이너리 형태로 실행파일이 되는것


### Linux

#### Linux memory 
- `VIRT`: task들의 가상메모리 총량 / `RES`: 물리메모리 총량 / `SHR`: 공유메모리 총량
- `free`: total / used / free / shared (so파일, 커널 등) / buffers (`buffer cache`: 파일시스템 메타데이터 캐시) / cached (`page cache`: 파일에 대한 캐시)
- `/proc/meminfo`
- 리눅스 메모리 할당
    1. 할당가능: 할당
    2. 불가능 : swap or OOM

#### vfork vs COW
- `fork()`: 부모의 메모리를 일단 복사함. 근데 이후에 - `execl()`을 실행하면 기존 메모리를 다 지워버려서 불필요한게 됨. vfork는 일단 복사하지 않고 같은 공간을 가르킨다 함.
- COW와 비슷하긴 한데 약간 다른듯

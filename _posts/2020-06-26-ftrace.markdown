---
layout: post
title:  "Embedded linux debugging"
date:   2020-06-25 09:00:05 +0800
categories: coding
use_math: true
tags: coding C
---

### ftrace
* <a href="http://egloos.zum.com/rousalome/v/10011670" target="_blank">http://egloos.zum.com/rousalome/v/10011670</a>
* 책 1권 99p


#### /sys/kernel/debug/tracing 
`/sys/kernel/debug/tracing`에 설정용 파일들 존재
1. `tracing_on` : 온오프
2. tracers
   1. `nop`: 기본. ftrace이벤트만 출력
   2. `function` : set_trace_filter로 지정된 함수를 누가 호출하는지 출력
      * <a href="https://stackoverflow.com/questions/38311946/unable-to-trace-syscall-via-ftrace?rq=1" target="_blank">/sys/kernel/debug/tracing/available_filter_functions 파일 내용을 grep해보면 필터가능한 함수목록을 찾을 수 있음</a>. 여기 없는 함수가 목록에 포함되서 filter세팅이 안되면 시스템이 꺼짐. 모든 함수를 트레이싱하다 IO block걸리는듯
      * `echo 1`을 `options/func_stack_trace`에 주면, 필터 등록된 함수의 콜 스택을 기록
   1. `function_graph` : 함수 실행 시간과 세부호출 정보를 그래프 포맷으로 출력
3. `options` : 설정용 하위 옵션파일들 존재
4. `event` : ftrace에서 따로 제공하는 이벤트들. 대표적으로
   1. `sched` : 프로세스가 스케쥴링되는 동작과 스케쥴링 프로파일링을 트레이싱하는 이벤트들
      1. `sched_switch` : 컨텍스트 스위칭
      2. `sched_wakeup` : 프로세스 꺠우기 ...
   2. `irq` : 인터럽트, soft IRQ를 트레이싱하는 이벤트들
      1. `irq_handler_entry` : 인터럽트가 발생한 시각, 인터럽트 번호 및 이름 출력
      2. `irq_handler_exit` : 인터럽트 핸들링 완료 ...


#### 메세지 포멧
`프로세스명`-`PID` `[CPU번호]` `d... (컨텍스트정보)` `타임스탬프`: `이벤트`: 이벤트 정보
* 컨텍스트 정보
  * \[인터럽트 활성화 여부, 선점 스케쥴링 여부, 인터럽트 컨텍스트 여부, 프로세스의 thread_info구조체의 preempt_count값\]
  * `d`: 해당 CPU 라인의 인터럽트 비활성화
  * `n`: 현재 프로세스가 선점스케쥴링 될 수 있는 상태
  * `h/s` : h면 인터럽트 컨텍스트, s면 soft irq 컨텍스트
  * 0~5: 프로세스의 thread_info구조체의 preempt_count값
  * ex) `dnh2` 
* 이벤트 정보
  * 각 이벤트마다 다름. 웹페이지나 책 (111p) 참고

### printk
* <a href="http://egloos.zum.com/rousalome/v/9992580" target="_blank">http://egloos.zum.com/rousalome/v/9992580</a>
* 책 1권 92p


### gdb
- 어셈블러 볼때 좋은듯
- 빌드시 -g옵션
- `gdb 실행파일`
- `n` : 1줄 실행
- `b 함수명` : breakpoint
- `r` : 실행
- `layout asm` : 어셈블러
- `layout reg` : 현재 레지스터 상황. 다른 mode의 reg는 못보나?
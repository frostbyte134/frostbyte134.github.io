---
layout: post
title:  "서마터카 소프트웨어 엔지니어링"
date:   2020-05-22 09:00:00 +0800
categories: coding
use_math: true
tags: coding C
---

빨리 시험 봤으면 ㅡㅡ 뭐하는건지...

다이어그램 문제
- 문서2-문제20, 21, 22

정리
* 경험기반 추정 : WBS (Work breakdown structure) 기반
* 추출 - 명세 (정의 - 분석 - 우선순위화) - 검증

- 각각의 요구사항은 서로 상충하는 부분이 있으며, `아키텍처`를 통해 이해당사자들은 서로의 요구사항이 어떻게 상충하는지 이해하게 된다
- 아키텍처는 디자인 초기에 이뤄지는 디자인 결정사항을 나타낸다
- 안전목표 = 최상위 요구사항. HARA에서 ASIL등급 도출
  > 안전목표에 ASIL이 부여되며, 이 안전 목표를 만족하는 안전 요구사항에도 안전목표와 같은 ASIL이 부여된다. 안전요구사항을 구현하는 시스템도 시스템 요구사항의 ASIL을 받고, 시스템을 구성하는 HW와 SW도 ASIL을 부여받으면서, 최상위 안전목표에 할당된 ASIL에 따라서 기능안전에서 요구하는 엔지니어링 활동을 수행하는 것이 기능안전의 전부라 할 수 있다  

  > HARA분석으로 시스템의 ASIL을 결정한다. 안전 목표 -> 안전 요구사항 -> 시스템 요구사항 -> SW/HW요구사항 (이과정에서 ASIL분해가 일어남)
- SW FMEA - 심각도 x 발생확률 x 감지가능성 중 선넘는 일부만 감시하는 __정량적 FMEA 보다 정성적 (결함식별 -> 결함 제거 설계안 도출) FMEA를 더 많이 활용__
  - SW FMEA는 SW아키텍처 설계 / SW단위설계에서 활용
  - SW FMEA에는 원인 - 결함 - 고장의 관계가 있다. 이 개념은 상대적이다
  - SW 아키텍처에서 FMEA할 최소 단위 설정 - 해당 용소에서 상위로 고장 분석 수행 = `귀납적`

### EAST-ADL 
- 모델 기반 시스템 엔지니어링 = 문서 -> 모델
- 시스템 모델 + 확장 모델

`EASE-ADL`과 타 표준과의 차별성
- UML: SW지향적. EAST-ADL은 자동차 특화
- SYSML: UML을 시스템 모델링에 적합하게 재정의한 표준. EAST-ADL은 이를 참조했으나 자동차 특화임
- AUTOSAR: 오토사는 실제 구현과 관련된 아키텍처 메카니즘 중심. EAST-ADL은 좀 더 추상적인 시스템 기능 아키텍처. 오토사 스펙을 준수함


### 오토사
- 소프트웨어 구조, 개발 프로세스 표준화
- 아키텍처, 방법론, APP인터페이스 포함. 차량용 SW의 이식성/재활용성 높이는 것
- 오토사의 VFB - 미들웨어
- 오토사 SW 컴포넌트는 기본적으로 하부의 HW나 OS에 직접적으로 연결할 수 없어 각 SW컴포넌트는 스레드나 프로세스를 구현할 수 없음. 대신 런타임동안 러너블로 감싸여 실행됨
- `ECAL` : ECU 추 상화 계층. ECU 하드웨어 레이아웃 인터페이스 (IO/통신/메모리/온보드 장치)
- `MCAL` : MCU 드라이버들의 집합

#### 사이클로매틱 복잡도
- <a href="https://m.blog.naver.com/k97b1114/140164338676" target="_blank">수행 그래프의 리전의 수</a>
- <a href="https://zetawiki.com/wiki/%EC%88%9C%ED%99%98_%EB%B3%B5%EC%9E%A1%EC%84%B1" target="_blank">M = E(엣지) - N (노드) + 2 * P (컴포넌트) </a>

#### 소프트웨어 아키택처 관점(view)
- <a href="https://jy-doromi.tistory.com/70" target="_blank">https://jy-doromi.tistory.com/70</a>

#### 클래스 다이어그램
- <a href="https://sabarada.tistory.com/72" target="_blank">https://sabarada.tistory.com/72</a>
- A가 B를 가져다 쓴다 (참조, 지역변수, 배열 등등) = A--->B

#### 데이터 흐름도
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Data-flow-diagram-example.svg/956px-Data-flow-diagram-example.svg.png">

- 얘만 프로세스가 동그라미인듯?


#### 구조도 (structure chart)
- <img src="https://t1.daumcdn.net/cfile/tistory/1121AC254CEFA2D443">
- 속빈 동그라미 = 데이터, 꽉찬 동그라미 = control flow

#### 시퀸스 다이어그램
- `alt` : if-else
- `opt` : if
- `loop`

#### 상태 머신
- event[cond]/action
- 2-33

### 이해 안되는 문제
1. `1-15` : 난 ㄴ-ㄹ-ㄷ-ㄱ 인거 같은데, ㄷ은 정의고 ㄹ은 우선순위화라서 ㄴ-ㄷ-ㄹ-ㄱ 이라네
2. p-14, 15, 16, 24, 28
3. MCU테스트 항목: 타이머가 잘못 동작 / 함수 호출이 잘못 / ISR이 무한루프
4. 심발감 노제심
5. HARA - 위험 1-N 안전목표+ASIL -> 기능안전 요구사항 -> 기술안전 요구사항 -> 시스템/HW/SW 안전 요구사항
   1. 소프트웨어 안전 요구사항은 시스템 수준에서 도출한 기술 안전 요구사항 (Technical safety requirement) 중에서 SW로 할당된 것을 분석하여 작성
6. SW상세 설계에선, __결함에 관한 것을 하면 안됨__
7. 기순교절 시논우
   1. `순차적 응집도` : 모듈 내에서 한 기능으로부터 나온 값을 다른 기능에서 사용하는 경우
   2. `절차적 응집도` : 모듈이 다수의 관련 기능을 가질때, 모듈 내에서 순차적으로 수행되는 경우

### 어딘지 모르겠는 것
`HSI`
- HW - SW interface
- SW개발 담당자가 결정해야 하는 것
  - MCU 핀을 제어하는 함수의 수행 주기
  - __pin을 제어하기 위해 사용되는 데이터 범위__ (이외에 모든 MCU pin은 HW임)
  - 감시기를 다루기 위한 MCU의 레지스터 정보
  - > SW개발 담당자가 결정해야 하는 정보: HW값을 SW로 변환해 저장할 변수, 변수범위, 변환식, 변환 또는 제어 함수, 함수의 수행 태스크, 수행 주기 등이 있다
- HW담당자 역할
  - MCU pin의 입출력 방향 / 범위 / 정확도 / test point / low일시 타깃모듈 상태
- 출제 - 2-15, 1-14, p-30


#### 안전 메카니즘
- 입력 이중화 : 입력범위 안의 잘못된 값들
- 타임 스탬프 : 센서값의 지연, 반복 검출
- 프로그램 흐름 모니터링 : 지연시점 검출
- 감시기 (watchdog) 기반 프로세스 모니터링 : 무한지연시점 검출 (프로그램 흐름 모니터링은 hang때문에 안됨) 

`Data flow diagram, 데이터 흐름도` -> `structure chart, 구조 차트`
- 2-31, 2-22, 1-7 (structure chart), p-16 (거지같은 문제)
- 구조차트의 `Fan-out` : 나가는 -> (호츨) 화살표의 개수. 마름모꼴도 다 셈

`seqeuence diagram` -> `SW FMEA`
- 1-5

`전이 트리`
- 2-33, 1-33
- `상태 커버리지` : 모든 상태를 1번만 방문하면 됨. 상태 = 박스 != 이벤트
- `전이 커버리지` : 전이 트리의 모든 경로를 테스트 
- A - B - C - D - A에서 마지막 A는 생략

`제어 흐름 그래프`
- `statement coverage` (문장 커버리지) : 각 statement를 1번만 지나가도 됨
- 출제 : 1-9

오류감지 기법
- `계수기`  (alive counter or sequence number): 메시지 반복, 손실, 순서 역전, 삽입
- `첵섬` : 메시지 오염만
- `인증` : 메시지 가장 (masquerate), 메시지 주소?
- `제한시간 모니터링` : CAN bus off, timeout
- `타임스탬프` : 메시지 반복, 순서 역젼, 지연. __삽입은 없음__
- 출제 : 1-24, p-29

`정적 SW아키텍처`
- transitive함 : A->B->C일시, C가 변경되면 A도 봐야함
- 출제 : p-8

__상태 다이어그램 (state machine, diagram)__
- event[cond]/action
- 최종 선택된 TC 시나리오는 작성한 전이 트리와 일관성을 가지도록 작성되어야 한다
- 출제 : 1-32, 1-33, 2-33?, p-31 (이거 좋음)

#### 프로젝트 생명주기 (lifecycle) 모델
- `애자일 모델` : 이해관계자와 빈번한 피드백 (!= iterations). 체계적 X
- `나선형 모델` : 핵심요구사항 - 위험분석 - 구현 - 평가 (반복!). 위험요소가 클때 좋음
- `폭포수 모델` : 요구사항 변경 / 피드백 반영 어려움
- `증가 모델` : 체계적. 개발규모가 크나, 도중 피드백 / 일부 요구사항은 개발하며 상세화가 필요할 때y
- `진화 모델` : 요구사항이 모호할 시, iteration

출제 : 2-12

### 1.1 요구사항 도출 및 분석

#### 1.1.1 소프트웨어 요구사항을 고객 또는 시스템 요구사항으로부터 도출하기 위한 기법을 설명할 수 있다.
- `브레인스토밍`: 정해진 요구사항이 없을 시. 자유롭게
- `설문`: 대면이 없으므로 자유로움. 설문지 필요. 개인별 요구사항 도출 기법 (설문, 인터뷰) 여서 아이디어 도출/정제에 비교적 덜 효과적
- `사용자 관찰` : 사용자를 직접 관찰. 최종사용자와의 거리 줄일 수 있음
- `프로토타이핑` : 시제품 (mockup), 종이에 그려서 진행. 아이디어에 대한 피드백 획득가능, 구체화에 좋음.
- `인터뷰` : 직접대화. 고객참여가 필요. 새 아이디어 만드는 데는 좋지 않음
- `워크숍` : 짧은 기간, 모여서

출제 : 2-1, p-5


#### 1.1.2 예외 기능을 도출하기 위한 오류 유형을 설명할 수 있다
- `No function` : "조건이 만족되면 해야 하는데 하지 않음"
- `Degraded or Exceed` : __시간__ 과 관련된건 절대 안됨 (ex - 100ms이내 알람 줘야 되는데 안줌 = too early too late. wtf. 1024 x 512로 출력해야 하는데 안하는 경우 등)
- `Unintended work` :  EPB스위치가 ON되지 않았으나 주차 브레이크 토크가 제공되는 경우
  - D단에 있는 동안 후방영상 정보를 출력하지 않아야 하는데 출력한 경우  
- `No stop, Still work` : 변경시 관둬야 하는데 관두지 않는 경우
- `Unintended stop` : "계속해야" 하는데 멈춘 경우. 이거 하나로 No function과 구분
- `Too early or Too late` : 100ms이내 알람 줘야 되는데 안줌
- 출제 : 2-16, 1-1, 1-16 (__지속적으로__ 가 있으면 Unintended work가 아님. 말이 되나. 대체 이런걸 왜하는거야. 아닌가? 동작한다 / 동작안한다 구분인가?), p-1

#### 1.1.3 오류 유형을 적용한 예외 기능 시나리오를 작성할 수 있다
- 이거 주관식 어디에 있었음

#### 1.1.4 소프트웨어 요구사항 분석 활동의 순서를 설명할 수 있다

추출 (from system) - 명세 (정의 - 분석 - 우선순위화) - 검증
- 요구사항 검증 기준을 작성하였다 : 명세(정의)
- 구현되야 할 기능/특성을 분류하여 요구사항에 할당하였다 - 명세(분석같은데 우선순위화래)

### 1.2 요구사항 명세 및 검증

#### 1.2.1 좋은 SW요구사항 명세서를 작성하기 위한 특징을 설명할 수 있다
- 도출/추출(from 시스템) - 명세 (정의 - 분석 - 우선순위화) - (추적) - 검증의 순서
- 출제 : 1-?, p-3

#### 1.2.2 SW요구사항 명세서를 구성해야 하는 항목을 설명할 수 있다
- 외부 인터페이스 요구사항 / 기능 요구사항 / 성능 요구사항 / 논리적 DB 요구사항 / 설계 제약사항 / SW시스템 속성?

#### 1.2.3 소프트웨어 요구사항의 품질 속성 (비기능 요구사항)을 설명할 수 있다.
- `추적성` : 요구사항의 도출 근거를 찾을 수 있는가
- `일관성` : 동일한 의미를 가지는 용어를 사용해서 요구사항이 기술되었나
- `필요성` : 
- `검증가능성`: 명확한 검증 기준이 제시되었나. 테스트가 불가능한 요구사항에 대해서는 검토 처케르스트가 기술되었나
- `명확성` : 요구사항에 사용된 문장이 모호하지 않나
- `완전성` : SW컨텍스트에 식별된 모든 인터페이스에 대해 요구사항이 기술되었나


출제 : 2-3, p-6

요구사항 구분하기
- `SW 비기능 요구사항` : MISRA 준수(신뢰성), AUTOSAR 4.1 준수(유지보수성), 300KB이상의 RAM확보 (자원활용성)
  - 암호해독에 100초이상이 걸려야 한다, 운전자의 입력에 1초이내로 응답해야 한다, 리눅스/윈도우에서 실행되어야 한다 / 한번 데이터 전송에 8kb이상이 전송되면 안된다
- `SW 기능 요구사항` : 페달을 떌 시 0.5초 이내에 압력이 0bar가 되어야 함 (시간효율성?)
- `HW 요구사항` : 셧다운 후 대기젼류는 200uA 유지해야 함
- 출제 : 2-30, 1-3

#### 1.2.4 소프트웨어 요구사항의 검증 기준 (verification criteria)을 작성할 수 있다.
- 검증 기준은 __요구사항이 합의된 제약 내에서 검증될 수 있음을 입증할 수 있는 내용으로 작성__돼야. 뭐래. 국어부터 좀...

출제
- 2-17 (이문제 "모든 입력에 대해 25ms에 반응해야 한다" 에 대해 i1, i2의 입력시간과 o1의 출력시간을 디버그를 이용하여 측정한다)  
  CPU 최대 로드라는 조건이 들어가야 함
- 2-25 (2500rpm에서 모터의 소음은 67dBA보다 작거나 같아야 한다 - 주변온도 25C, 압력 1013mbar, 1m떨어진 수평 위치에서 측정한다 = 맞음)
- 1-2 (답 잘못됐음. 해설을 봐야 함)

#### 1.2.5 표준 (ASPICE/CMMI/ISO26262)에 부합하는 소프트웨어 요구사항 추적 대상을 정의할 수 있다
- SW소스코드 중 중요 요구사항을 수현하는 함수는 SW요구사항과 추적을 관리한다. 모든 함수에 대해 추적관리할 필요는 없음
- SW요구사항은 피처단위로 말고, 각각 관리해야 함
- 단일코어 MCU의 경우, 모든 SW요구사항이 시스템 엘리먼트 1개로 추적되기 때문에 시스템 요구사항의 추적관리로 대체할 수 있으므로, 시스템 설계서와 SW요구사항 간의 추적은 관리하지 말라고 함. 뭔소리야?
-  SW통합 테스트 케이스는 SW아키텍처 설계서와 같이 추적되어야 함. SW요구사항과 같이 추적되는 것이 아님
-  Doors (요구사항 추적 관리 도구)에는 SW상세 설계서의 목록만 등록하여 SW아키텍처 설계서와 추적을 관리하고, 실제 상세 설계 산출물은 워드로 작성하여 SVN에 등록하고 참조하도록 한다 - 모든 산출물이 Doors에 등록될 필요는 없음

출제 : p-7

### 1.3 소프트웨어 안전 요구사항 명세
#### 1.3.1 소프트웨어 안전 요구사항에 해당하는 기능을 구분할 수 있다
SW
- 센서 오류에 대한 검출 및 대응 시간 목표값
- 모니터링 제어기와의 질의-응답기능 요구사항
- 레지스터 자가진단 수행을 위한 테스트패턴에 대한 요구사항
- watchdog (감지기)에 주기적으로 활성화(enable) 신호를 발생하는 기능에 대한 요구사항
- CAN메세지에 대한 오류검출 시간 목표값

HW
- 릴레이의 상시열림 기능
- watchdog의 타이밍 및 감지능력에 대한 요구사항


SW가 아닌 것
- 우발적(random) SW고장에 대한 확률메트릭 목표값 - SW는 우발적 고장이 없댄다

출제 : 2-19, p-4

#### Usecase


* `대안 흐름` : 사용자 입력에 의해 다른 flow가 실행되는 경우 (ex - 셔플 모드를 누른 뒤, 나중에 "다음 곡" 선택을 했을 시) 
  * 액터의 능동적인 옵션 선택 (취소선택 등), 시스템의 상태에 따른 선택 (bg작업이 가능할 경우 등), 데이터 유형에 따른 선택
* `예외 흐름` : 오류에 대한 대응 (ex - 재생이 불가능한 파일이 선택된 경우). 기본 / 대안 외의 모든 흐름
    * 부적절한 입력, 시간경과/미달, 시스템 처리 예외 (?)

출제 : 2-1, 2-31 (대안흐름 만들기, 주관식), 1-31 (대안흐름 만들기, 주관식)


#### 안전 요구사항에 대한 ASIL개념을 설명할 수 있다
ASIL ( Automotive Safety Integrity Level )
- HARA에 의해, (안전목표=안전 요구사항)와 ASIL이 도출됨
-  QM < A < B < C < D 
-  안전 목표 -> 기능안전 요구사항 -> 기술안전 요구사항 -> 시스템/HW/SW 안전 요구사항
- 하드웨어 아키텍처의 경우 소프트웨어 아키텍처와는 다르게 안전 관련된 컴포넌트들의 고장율(Failure Rate)을 관리해야 한다. 

### 2.1 소프트웨어 아키텍처 설계 (스케쥴러 / 메모리 / 인터페이스 / UML notation / modeling)

#### 2.1.1 소프트웨어 아키텍처 관점
- `프로세스 관점` : 시스템에 어떤 proc/thread가 있는지, 동기화 / 소유 등 표현
- `논리 관점` : 소프트웨어를 구성하기 위한 모듈들의 구조를 표현. 책 어딘가에 나왔는데.
- `배포 관점` : 시스템을 구성하는 컴퓨터들이 어떻게 배치되고 연결돼있는지 표현
  - 출제 : p-13
- `유스케이스 관점` : 최종 사용자가 바라보는 시스템
- `구현 관점` :  최종 소스코드들간의 관계, 분석/설계 모델들이 그 소스코드에 어떻게 연결됐는지 (?)

출제 : 2-6


#### 2.1.2 소프트웨어 아키텍처를 설계하기 위한 설계 전술을 설명할 수 있다
- `예외 처리` : 예상하지 못한 누략, 정지 타이밍 발생 시 이를 알리고 대응
- `실행 경로 제한` : 성능을 위한? 뭐지 이건
- `통신 경로 제한` : 모듈간 데이터 공유 경로 제한. 이걸 통신이라고 해버리네..유지보수성 좋아짐
- `샘플링 빈도 조정` : 다 처리하면 느려지니 성능을 위한 것
- `실행시간 제한` : 이벤트 응답 타임아웃 도입. 성능인듯?
- `사용자 인터페이스 분리` : 사용 편의성을 위한?
- `중계자 사용`: 모듈간 결합관계를 약하게

"아키텍처 설계 지침" 이란 문서가 있긴 한데..별로 보고싶진 않네 ㅡㅡ

출제
- 2-7fa

#### 2.1.3 전장 시스템의 SW아키텍처 특징을 설명할 수 있다
?

### 2.2 소프트웨어 분석 설계 기법 활용 (구조적, 객체지향 등)


#### 2.2.1 SW아키텍처 설계 원칙을 설명할 수 있다
그런 게 있나

#### 2.2.2 객체지향 분석/설계 기법 및 표기법 (UML)을 적용하여 SW아키텍처 설계 및 상세 설계를 수행할 수 있다


- `SW모듈 상세 설계 결과`
  - \+ : public
  - \- : private
  - 꽉찬 네모 : aggregation
  - 빈 네모 : inheritance?
  - 화살표의 숫자: 해당 박스의 객체 숫자
  - 출제 : 2-8
- `시퀸스 다이어그램` : 호출한 쪽에서 호출당하는 쪽으로 화살표
    - 출제 : 2-4, p-10 (이거 중요)

__상세 설계에선 결함에 관한 활동을 하면 안됨__ (안전분석에서 해야 함)


#### 2.2.3 MBD 적용 개발시
 고려사항을 설명할 수 있다
SW개발시 MBD적용과 함께 ISO 26262 준수를 요청받고 있는 경우
- MBD의 경우, SW아키텍처 설계 및 단위 설계에 대한 검증방법은 모델 수준에서 적용될 수 있다 (MBD니까!)
- 자동 코드 생성시, 상세걸계에 대한 표기법은 (코드 생성에 기반이 되는) 모델 수준에서 적용된다 (MBD니까!)
- SW단위설계에 적용되는 설계원칙은 매뉴얼과도 다를 수 있음 (MISRA도 여러 종류가 있고, 예외도 허용)
- 모델링 및 코딩 가이드라인에 따라 개발하나, 매뉴얼과 다를 수도 있음


출제 : 1-18

### 2.3 소프트웨어 상세 설계 (UML기번 분석 및 설계)

#### 2.3.1 소프트웨어 상세 설계를 수행하기 위한 SW공학 원리를 설명할 수 있다

응집도 및 결합도 : 응집도는 높게, 결합도는 낮게

응집도 : 높은 (좋은) 순서대로
- `기능적 응집도` : 모듈 내부의 모든 기능이 단일목적을 위해 수행되는 경우
- `순차적 응집도` : 모듈 내에서 한 기능으로부터 나온 값을 다른 기능에서 사용하는 경우
- `교환적 응집도` : 동일한 입출력을 사용하는 활동들이 모인 경우
- `절차적 응집도` : 모듈이 다수의 관련 기능을 가질때, 모듈 내에서 순차적으로 수행되는 경우
- `시간적 응집도` : 연관된 기능이라기보다 동일 시간 내에 수행돼야 하는 기능들이 모인 경우
- `논리적 응집도` : 유사한 성격, 비슷하게 분류되는 처리 요소 (온도센서/압력센서) 들이 같은 모듈에서 수행되는 경우
- `우연적 응집도` : 연관X

순서대로 실행되는 기능들이 서로간에 입출력에 연관성을 가지면 순차적 응집도, 입출력에 상관없는 연관성을 가지면 절차적 응집도.


결합도 : 낮은 (좋은) 순서대로
- `데이터 결합도` : 한 모듈이 다른 모듈 참조시, 필요한 데이터만 call by value로 param으로 넘기는 경우
- `스탬프 결합도` : 모듈간의 인터페이스로, param에 포인터기반 struct로 넘어가는 경우
- `제어 결합도` : value뿐만이 아니라, if-else등 flow를 결정하는 제어플래그 변수가 매개변수로 전달되는 경우
- `외부 결합도` : 특정 모듈에서 반환한 값을 다룬 모듈에서 참조해서 쓰는 경우. 동일한 광역 데이터 아이템 사용. 윗 스택의 지역변수를 같이 쓰는 경우인듯
- `공통 결합도` : 전역변수를 이용한 결합
- `내용 결합도` : 한 모듈이 다른 모듈 참조시, 내부 변수들을 가져다 쓰는 경우
- 출제 : 2-23, p-12, p-15
  - p-16 (이거 문제 좀 거지같음)
    - 주기적으로 수행하며 베티적인 기능을 수행하므로 기능적 응집도 관점에서 하나의 task로 병합? 미쳤나
    - 두개는 주기직 \[periodic function\], 하나는 비주기: 같은 task로 설계할 수 없음




#### 2.3.2 재사용, 역공학, 리팩토링 기법을 설명할 수 있다
소프트웨어 `3R`??!!!
- Reuse, Reeverse engineering, Refactoring
- `역공학` : 코드에서 사양서 문서 추출
  - 개발 단계를 역으로 올라가 기존 개발된 시스템의 코드/데이터로부터 설계 명세서나 요구사항서등을 도출하는 작업
- `리팩토링` = `reengineering`
  - 기존 시스템을 널리 사용되는 프로그래밍 표준에 맞추거나 고수준의 언어로 재구성하여 타 HW에서 사용가능하도록 변환하는 작업
- `재사용`
  - 이미 개발되어 기능/성능/품질을 인정받았던 SW를 다시 사용
  - 다른 시스템에서 이용되는 SW를 파악하고 재구성하여 새로운 시스템에 적용하기 위한 작업

#### 2.3.3 소프트웨어 요구사항을 분석하여 상세 설계를 수행할 수 있다
- `SW아키텍처 설계` : 에서는 컴포넌트의 수행 주기, 컴포넌트 수행 구조에 대한 대안 도출
- `(컴포넌트)상세 설계` : 에서는 컴포넌트 내부 수행 순서, 알고리즘 자체 평가 수행

출제 - 1-6, p-14 (이거 중요)

### 3.1 형상관리 적용
#### 3.1.1 형상관리의 개념과 활동을 설명할 수 있다

제품 baseline 수립
- 요구사항에 맞게 동작하는지 검증할 필요는 없음
- 테스트에서 발생한 결함이 해결되었는지 확인 필요
- 베이스라인에 포함되야 하는 요구/변경사항이 반영되었는지 확인
- 기술적인 검토 / 테스트까지 갈 필요는 없다고 함. (베이스라인에 포함되는 개별 산출물들이 정확하고 빠짐없이 작성되었는지 검토 = X)
- 출제 : 2-9

#### 3.1.2 변경관리의 개념과 활동을 설명할 수 있다
책 보십쇼

#### SW의 유지보수를 위한 개념과 기법을 설명할 수 있다
- 뭐지. CI?



#### 4.1.2 (4.1.1없음) SW테스트 단계별 특징과 수행 환경을 설명할 수 있다
- ?

### 4.2 테스트 기법 적용 (black/white/fault-injection)

whitebox testings
1. 구문 커버리지(Statement coverage) : 
2. 분기(결정) 커버리지(Decision or Branch coverage) : 각 분기를 들른 적만 있으면 됨
3. 조건 커버리지(Condition coverage)
4. 변경 조건/결정 커버리지(MC/DC) : A && B 에서, A==False && B==False 만 빼고 다 하면 됨
5. 전부 다 가는거 뭐였지. 전이 커버리지인가

출제 : p-19


#### 4.2.1 스프트웨어 테스트 케이스 설계 기법을 설명할 수 있다
* `동등 분할` : 입력범위 나누기. 각 의미있는 구간만 나누면 되는 듯 (굳이 경계값 포함할 필요 없음). 0-15만 정상인 int8이 있으면, \[-128, -1\],\[0, 15\], \[15, 127\]로 나뉨.   
    출제 : 2-11, p-30
* 

#### 4.2.2 소프트웨어 요구사항, 아키텍처 설계, 상세 설계, 코드를 분석하여 TC를 설계할 수 있다 (Fault injection test 포함)
- `SW통합 테스트`: SW통합 테스트에 대한 전략으로 아키텍처 설계서를 기준으로 테스트를 수행하고, 함수 또는 호출 커버리지를 측정해야 함
- `SW 테스트`: 에 대한 전략으로 __요구사항 커버리지를__ 측정해야 함 (생각해보면, 시스템 테스트에 대한 전략으로 시스템 요구사항 커버리지를 측정해야 되는 거 같았음) 
- `SW 단위 테스트`: 에 대한 전략으로 상세설계서 기준으로 테스트 수행. 문장/분기/MDCD 커버리지를 측정해야 함

출제: p-21. 더 있을 것 같은데. 요구사항 커버리지를 측정해야 한다고? 무슨 요구사항이지?

#### Top-down test
- 테스트 드라이버: 최상위 함수용 1개
  - 최상위에서 완성된 모듈/컴포넌트를 임시로 호출하는 객체?
- 테스트 스텁: 전체함수 - 최상위 함수갯수
  - 테스트 스텁( Test stub, 이하 Stub )이란 테스트 중인 모듈이 호출하는 다른 소프트웨어 구성 요소(예: 모듈, 변수, 객체)를 일시적으로 대체하는 소프트웨어 구성 요소를 말한다




출제 - 2-26

#### __Fault injection test__

__MCU 테스트 항목__
- 타이머가 빠르게 동작하는 경우
- 함수 호출이 잘못된 순서로 호출되는 경우
- 인터럽트 처리 루틴이 무한루프에 빠지는 경우
- 센서 디바이스 드라이버 함수 호출이 할당된 목표 시간보다 긴 시간 후에 반환되는 경우

__센서 정상동작 진단 테스트__
- 샘플링 설정이 잘못된 경우 (ss)
- 센서 값이 진동 (oscillation) 하는 경우
- __ADC 값을 기록하는 메모리 버퍼가 부족한 경우__
- GND로 단락되어 비정상적인 센서값이 나오는 경우. 쇼트도 포함인듯

__메모리 테스트__
- 잘못된 포인터로 스택영역의 주소를 접근하는 경우

출제 : 2-25, 1-21

#### 블랙박스 테스트
- 경계값 분석 기법 - 요구사항의 입력 인터페이스 참조해도 되고, 상세 설계서를 참조해도 됨. 센서 측정값만 고려 (더 넓은 측정 가능범위는 고려 X)
  - p-22 예시. 측정값이 10~50일 경우
    - 경계값 : 9, 10, 50, 51
    - 강건성 : 9, 10, 11, 49, 50, 51
- 강건성 테스트 - <a href="https://smc1st.tistory.com/entry/%EA%B2%BD%EA%B3%84%EA%B0%92-%EB%B6%84%EC%84%9DBoundary-value-analysis" target="_blank">링크</a>
- 동등 분할 기법 - 아키텍처 설계서에 기술된 컴포넌트 인터페이스 참조해도 됨
- 상세 설계서에 기술된 함수의 입력 파라미터에 경계값 분석 기법을 적용하여 TC를 설계하였다
- 아키텍처 설계서에 기술된 컴포넌트의 인터페이스에 동등 분할 기법을 적용하어 TC를 설계하였다


> 함수에 대한 단위 테스트는 소스 코드가 아니라 상세 설계서를 기반으로 해야 함

출제 : 1-10, p-22 (이거 중요)


### 5.1 프로젝트 관리 수행 (일정, 추정, 라이프사이클 모델)

#### 5.1.1 프로젝트 계획 수립 및 조정, 모니터링 활동을 설명할 수 있다. (테일러링 포함)

프로젝트 계획 활동 간 의존성 규칙을 만족해야 함
1. 프로젝트 업무범위 및 목표 설정
2. 프로젝트 생명주기 정의 -> 이를 기반으로 프로젝트 활동 정의 (의존성도 고려)
3. 정의된 프로젝트 활동에서 수행에 필요한 인/물적 자원 산정
4. 자원 산정 기반으로 일정 수립
5. 검토, 조정

출제: p-23

#### 5.1.2 소프트웨어 개발 대상에 대한 규모를 추정할 수 있다

`전문가 경험기반 추정`
- 인적자원 추정에 앞서, SW규모 추정을 수행해야 함
- 경험기반 추정 : 무조건 2명이상 배정해야 함
- 경험기반 추정의 경우, WBS (Work Breakdown Structure)를 기반으로 추정수행이 일반적
- 추정은 반복수행되어야 함. 초기에는 비교적 부정확

출제: p-24

### 5.2 위험관리 수행
#### 5.2.1 위험관리의 개념과 활동 설명
- __가능성이 높다__ 위주로 고르면 됨
- 이미 벌어진 일 = 이슈와는 구분해야 함. ex - 현재 프로젝트 진행율이 3% 지연 -> 위험관리 대상이 아니라고 함 (ㅡㅡ;)  
    > 1-12. 이슈와 위험(risk)의 가장 큰 차이: 이미 발생한 것인지 잠재적인 문제인지의 차이
- 대응책이 있는 것도 제외

출제 : 2-13, 1-12

위험에 대한 `완화` 조치
- 위험 발생 전에 완화하는 것. 발생 후는 `사후관리` 로 분류해서 완화가 무조건 아님.
- 출제 : p-25
#### 5.2.2 결함관리의 개념과 활동을 설명할 수 있다

`FMEA`
- 고장 영향에 적용가능한 __안전 메커니즘__
    - `입력 이중화` : 값이 입력범위 안에 있을 시, fault 체크 가능
    - `프로그램 흐름 모니터링` : 지연시점 대응가능. 무한지연시점에는 대응 안됨. 이땐 watchdog 필요
    - `입력 값에 대한 범위 점검` : 센서의 단락(open) / 쇼트만 감지가능
    - `감지기(watchdog) 기반 프로세스 모니터링` : 무한지연시점, 지연시점 둘다 검출가능?
- 출제 : 2-21, 1-5

결함관리 세부사항
- 결함조치/분석 결과로 베이스라인 산출물을 변경해야 하는 경우, 무조건 변경관리 절차를 따름
- 테스터는 __검토__ 를 통해 조치완료를 하는 것이 아니고, 무조건 재태스트를 통해 조치완료를 확인해야 함
- 결함 원인 파악은 무조건 개발자에게 (제3자 X)
- 출제 : p-26

기타
- 80:20 법칙 - 대부분의 결함이 나던 곳에서 난다
- 


### 6.1 품질보증 및 측정 수행

#### 6.1.1 개발단계의 품질보증 개념과 활동을 설명할 수 있다 (개발 산출물 품질 위주)

측정지표
- `성과 가치` (earned value): 프로젝트 리소스 및 비용. __완료된 태스크의 계획 공수 합__
- `투입 공수` : __프로젝트 리소스 및 비용__. 업무 진도 및 일정은 critical path. 이거 월요일에 함 더 보자
- `요주의 경로`(critical path) : 업무 진도 및 일정

- 출제 : 1-11, 1-30

#### 6.1.2 코드 복잡도 개념을 이해하고 개선을 수행할 수 있다
- 사이클로매틱 복잡도 : 전체 분기 combination갯수 + 1
- 함수 복잡도 : 내부 명령문 갯수 (statement 갯수), param 갯수도 포함

#### 6.2.1 동료검토의 개념과 활동을 설명할 수 있다


`동료검토`
- 1~2명. 비공식적. 문제를 찾고, 규칙을 따르며, 검토준비를 해서, 결과를 작성한다
- `워크쓰루`
  - 인스펙션보다 인포멀함
  - 개발자 / 테스터 그룹에서 발표 형식으로 코드 읽고 질답. 5명정도
- `인스펙션`
  - 여러 방법이 존재
  - 계획(장소/참여자) - 준비(__사전검토__ 필수. 교육 등) - 검토회의 (결함 개수/유형 등 식별된 것 기록. 조정자/기록자 있음) - 수정 (결함이 수정되었는지) - 후속
  - 매우 포멀함. 코드를 읽는 사람이 개발자가 아니므로, 이해시켜야 함. 검사관 (개발자, 테스터) 들도 이해시켜야 하고
  - 체크리스트 기반 평가. 제3자 관점에서 형식에 대한 데이터 수집
  - 개인관점은 미포함하도록. __문제점만 발견 (해결책까지 찾는다고 하면 틀림)__. 후속조치에서는 처리여부만 확인하고 why, how는 언급 x
  - <a href="https://m.blog.naver.com/PostView.nhn?blogId=knlee3&logNo=130166412394&categoryNo=6" target="_blank">가능한 Ad-HOC형태가 안되도록. 준비는 개인적으로</a>

출제 : 2-14, 1-13, p-28

### 기능안전 개요 (HARA, FMEA, FTA, 안전 메커니즘)

#### 7.1.1 시스템 안전 요구사항과 SW 안전 요구사항의 관계를 설명할 수 있다

> 소프트웨어 안전 요구사항은 시스템 수준에서 도출한 기술 안전 요구사항 (Technical safety requirement) 중에서 SW로 할당된 것을 분석하여 작성


#### FTA
| : and  
( : or

> FTA는 정량적 분석이나 정성적 분석에 모두 사용될 수 있는 분석 기법으로써 고장이나 재난 요인(Hazard)의 제거 가능성을 과학적으로 제안할 수 있는 방법이며, 다중 고장으로 인해 발생할 수 있는 복잡한 영향을 분석할 수 있다는 장점이 있다. FTA는 개념은 트리 형식으로 고장 원인을 분석하는 것이다. 차량 상에서 운전자가 인지할 수 있는 최상위 고장(재난 요인: Hazard)을 최상위 고장 이벤트(Undesired Event: UE)로 정의하고, 그 고장 이벤트가 발생할 수 있는 원인을 근본 원인이 파악될 때까지 분석한다. 또한 FTA는 분석 결과에 대해 발생할 수 있는 확률을 계산하면 최상위 고장 이벤트가 발생할 수 있는 확률을 계산할 수 있다. FTA는 각각의 근본 원인이 발생할 수 있는 확률을 줄여주기 위한 솔루션 이벤트들을 추가하여 고장이 발생할 수 있는 확률을 줄여주는 것이 목표이다.

출제 : p-11








### 스마트카 엔지니어링 책 외울것

`FMEA` (52p)
- 고장 모드 (failure mode)의 위험도를 평가하고, 원인과 연향을 분석해 FM의 발생 가능성을 낮추거나 회피하는 방안을 정의하는 경험에 의한 확률적 분석 방법
- 단일 고장 원인/영향 파악 가능. 여러 고장 때문에 생기는 복합적 영향은 파악 힘듬
- 예측되지 않는 고장 파악 어려움. 모든 고장 = 사고는 아니기 때문에 과도한 작업일수도
  - `시스템 FMEA` : 시스템이 외부와 인터페이스 될 때 생기는 FM분석. 초기단계
  - `설계 FMEA` : 시스템/HW설계. 시스템 기능상 FM분석
  - `프로세스 FMEA` : 제품의 생산/보관/운송 등 공정상의 위험 식별
  - `SW FMEA` : SW설계의 FM분석. 전역/지역변수, 캘 매개변수, alg, 내외부 인터페이스 등 검사
- 설계 결함단계에서 잠재적인 결함을 발견해 제거하는 과정
- 아이템/기능 선정 -> 예상 고장 기술 -> 원인 분석 -> RPN=심각도 X 발생확률 X 감지가능성 -> 일정이상 관리
- `SW FMEA`
  - RPN을 구하는 정량적 FMEA보다, 결함을 제거하는 설계안을 도출하는 정성적 FMEA를 많이 사용. __크게 SW아키텍처 설계와 소프트웨어 단위 설계__ 에서 사용
  - 원인 - 결함 - 고장의 관계가 있고, 이는 상대적
  - 소프트웨어 아키텍처에서 안전분석을 할 최소 단위를 설정하고, 해당 요소에서 상위로 고장 분석을 수행 : `귀납적 SW FMEA`


`시스템 개발 컨셉트` (61p부터)
- `시스템 요구사항`
  - 시스템이 언제, 무엇을, 얼만큼 수행해야 할지 시스템 관점에서 기술. 양산시 기능 이외에도 법규/규제 등도 포함 
  - 시스템의 확인(validation) 기준
  - 시스템의 기능/성능 평가 기준. 이로부터 __시스템 테스트__의 TC를 도출해 시스템을 평가함. 
  - 시스템이 수행해야 할 역할. 이를 분석해서 __시스템의 논리 아키텍처__ 설계
- `시스템 아키텍처`
  - 시스템 요구사항을 만족시키기 위한 최적의 해답
  - 엔지니어링 표준 규격 정의
  - `논리적 아키텍처`
    - 시스템의 기능 도출. 기능 간의 관계를 정의. 요구사항과 기술적 아키텍처 사이의 연결고리. 
    - 정확한 기술을 정의하는 것은 아님. 시스템의 `PBS` (Product Breakdown Structure)를 정의하는 게 아니라, 기슨과 인터페이스만 포함하는 기능 네트워크를 정의하는 것
  - `기술적 아키텍처`
    - 논리적 아키텍처를 만족시기키 위한 기술적 해답. __시스템 통합 테스트__의 기준 (TC도출).
    - 시스템 구성요소 간 데이터 특성, 프로토콜, 물리특성 고려. 시스템 레벨 고장/위험 식별.
  - 시스템의 구성요소별 요구사항/표준규격은 이를 구성하는 HW/SW 컴포넌트로 전달됨.
  - _시스템 요구사항 - 논리적/기술적 아키텍처 설계는 순차적으로 끝나느 것이 아니라, 시간에 따라 계속 서로 정합성을 맞춰가면서 변경해야 함_. 설계 과정에서 만나는 제약사항에 의해 변경가능
- `SW 요구사항`
  - 시스템으로부터 전달된 요구사항을 분석해 생성
  - SW기능, 비기능, 고장진단 요구사항 분석
  - SW요구사항을 기반으로 SW모듈 정의. SW모듈구조와 상호작용을 분석해 __SW 아키텍처__를 설계
- `SW 아키텍처`
  - SW통합의 기준. __SW통합 테스트__의 TC 도출
  - SW아키텍처를 기반으로 SW모듈별 상세 설계를 수행하고, 모듈을 구현함.
  - 각 요구사항은 상충되는 부분이 있고, 아키텍처를 통해 이해당사자들은 서로의 요구사항들이 어떻게 상충하는지 이해
- `SW 단위모듈 설계`
  - __SW단위모듈 테스트__ TC 도출의 기준 (SW unit test)
- `SW 단위 테스트`
  - 원시코드를 대상으로 하는 화이트박스 테스트를 수행?

EX)  
* 차량 레벨 요구사항 : 운전자가 차량의 연비를 확인할 수 있어야 한다
* 시스템 요구사항 : 연비를 확인할 수 있는 디스플레이 기능을 제공한다
* 논리적 아키텍처 : 디스플레이 기능, 연비 계산 기능 식병 및 상호작용을 고려해 설계
* 기술적 아키텍처 : 연비계산용 ECU, LDC 디스플레이 모듈, 두 컴포넌트간의 전기적, 기계적 상호작용 고려해 설계

> 요구사항은 시스템 개발 라이프사이클동안 지속해서 변화하는 특성이 있다. 개발이 진행됨에 따라 이해관계자들의 지식과 정보가 진화되고 의사소통 오류가 줄어들기 떄문이다.

변경에 등급을 매기는 것이 중요

CMMI나 A-SPICE와 같은 성숙 모델을 도입해 품질 관리를 함


#### 기능안전 (ISO 26262)
- 전장품의 오작동으로 발생하는 위험을 다룸
- 전기전자 시스템의 오작동으로 발생하는 위험 가운데 비합리적인 리스크를 제거하는 것


#### 위험관리
- 한정된 자원으로 모든 위험에 대비할수는 없음. 
- 위험우선순위 : 발생확률 X 감지가능성 X 영향도


#### HARA, ASIL
- 기능안전에서는 위험을 식별하고 평가하기 위해 HARA를 사용한다
- 노출도 X 제어가능성 X 심각도
- HA (위험 식별) -> RA (리스크 평가) -> ASIL로 위험 등급 부여 - 위험 식별됨
- 식별된 위협 중 최고등급이 해당 아이템의 ASIL등급으로 간주됨.


#### 안전요구사항 도출과 시스템 설계
- `안전 목표` = 시스템 요구사항급 (최상위 요구사항)
- 위험 다수를 하나의 안전 목표로 대응하는 것이 보통
- 안전목표에 ASIL이 부여되며, 이 안전 목표를 만족하는 안전 요구사항에도 같은 ASIL이 부여
  - 안전 요구사항 -> 시스템 요구사항으로 분해. 시스템 요구사항과 이를 구현하는 시스템도 시스템 요구사항의 ASIL을 받음
  - 시스템 요구사항 -> SW요구사항으로 분해. 시스템을 구성하는 SW/HW도 같ASIL을 받음
  - 이렇게 할당받은 AIL에 따라서 기능안전에서 요구되는 엔지니어링을 수행 = 기능안전
- 기능안전은 SW단독으로 적용불가능 (연관된 HW, 시스템 고려해야 함)

#### ASIL분해
- ASIL이 높다 = 위험
- 상위 요구사항을 받아 하위로 나뉘면서, 서로 보완적인 다른 메커니즘의 요구사항으로 나뉠 시 ASIL분해가 일어남












~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~이하 이전 내용~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


소공과목 중간고사 보는 느낌이네 ㅡㅡㅋ

59p V프로세스 외우기

### SW관리

#### 형상관리
> 형상관리의 개념과 활동을 설명  

- 104p
- 동일한 기준으로 개발을 진행하고, 개발 이력을 확보하기 위해서는 개발 산출물들의 `형상` (configuration)관리가 중요 (동일한 기준?)
- why `형상관리`?:
  - 시스템 개발(+유지보수)시 변경이력을 가시화해 통제 \\(\rightarrow\\) 변경 내용을 체계적/일관성있게 (기준 만족!) 시스템에 반영, 시스템 품질보증 & 생산성 향상시킴
- `형상관리 활동`: 식별된 형상 항목들의 `기준선` (baseline) 수립, 변경 추적관리, 기준선의 무결성을 수립 및 유지하는 활동

형상 관리의 정의 - 다음 3가지로 나뉨
1. 기준선 확립: 대상선정/기준선 생성 및 배포/시스템 구축
2. 무결성 확립: 기록 및 감시
3. 변경요청 추적 및 형상 통제: 추적관리 및 통제 

형상 관리를 위해서는 형상관리자/관리시스템/DB가 필요. `형상통제위원회` (Configuration Control Board)가 있어야 한다고 함. 왜 우리회산 없냐

#### 변경관리
> 변경관리의 개념과 활동을 설명

- 105p
- 엔지니어링 산출물 (요구사항, 설계사양, 코드(시스템))은 프로젝트 라이프사이클동안 항상 변함
- 변경이 관리되야 원인파악 / 의사소통이 원활

그림 찰지네  
<img src="{{site.url}}/images/sogong/change_manage.jpg" width="600">


#### 유지보수?
> SW의 유지보수를 위한 개념과 기법을 설명할 수 있다

밑도끝도없네...  
1. 변경관리
2. 품질관리
    - CMMI (품질보증 계획수립, 점검, 평가법에 대한 방법제공)나 오토모티브 SPICE와 같은 성숙 모델을 도입해 개발
    - ISO 9126 / 14598등의 최종제품 품질 평가
3. CI 같은거 말해도 되나. 대충 한두마디 적을거 준비나 해 놓자

### SW 테스팅

#### 테스트 프로세스 적용
> SW테스트 단계별 특징과 수행 환경을 설명할 수 있다

1. SW 단위 검증 (모듈 검증)
    - 조기에 시행 (당연..)
    - 원시 코드를 대상으로 하는 White box테스트를 수행 (왜 블랙박스는 안함?)
    - 단위테스트 전략수립 (...?) -> 테케 설계 및 구현 (boundary case + 실용성 있게) -> 환경 구축 (JUnit등) -> 수행 (코드 / 데이터 테스트, 동적 테스트, 실시간 테스트) -> 결과서 도출 및 정리
2. SW 통합과 검증
    - 통합테스트 전략수립 (빌드환경/툴 등) -> 통합빌드 수행 (컴파일 + 링크, 메모리 배치 (링커)) -> `ASAM` 작성 (튜닝, 캘, 고장진단)
    - 통합 시, 모든 MCU의 프로그렘 버전과 데이터 버전이 명시되고 문서로 만들어져야 함
3. 시스템 통합과 검증
    - 단위요소들 (협력업체들 gather)을 모아 시스템 완성 - 시스템 레벨에서의 요구사항/기능/성능을 만족하는지 테스트 (시험차이기 때문에 제한적 상황임)
    - 통합 테스트, 시스템 테스트, 인수 테스트 (?????) 수행
4. 차량 평가 및 데이터 캘
    - 캘: 성능 보정

#### 테스트 기법 적용
> SW테스트 케이스 설계 기법을 설명할 수 있다.  
  SW요구사항, 아키텍처 설계, 상세 설계, 코드를 분석하여 테스트 케이스를 설계할 수 있다.

이거 책에 없음. 알아서 찾아야 할듯


### SW공학 관리

#### 프로젝트 관리 수행
> 프로젝트 계획 수립 및 조정, 모니터링 활동을 설명할 수 있다

1. `프로젝트 계획 수립`
    * 목적: 프로젝스 수행 전, 개발 `범위`를 결정하고 들어가는 `자원`/`비용`/`일정`을 추정
        1. 범위: 기능/성능/인터페이스/제약 사항 등 서술.
        2. 자원:  인적(직위, 전문성 명시) / 소프트웨어(필요한 라이브러리 유뮤(라이센스) /하드웨어 (호환성 /기능 등 체크)  
            프로젝트 진행 상 필요한 시기에 해당 자원들이 있는지 확인
        3. 노력: 맨먼스
        4. 비용/일정: 위의 것들로 결정 
    * 프로젝트 계획서: __프로젝트 수행의 기준__ 이 되는 계획서를 구체적인 형태로 수립 - R&R을 명확히 정의
    * 착수 단계에서 수립되어야
      * 프로젝트 개요 / 범위 / 방법론 / 산출물 / 수행단계 / 일정 / 조직 / 운영방법 등
      * 큰 마일스톤 / 마일스톤마다의 딜리버러블
2. 조정
    ????
3. 모니터링
    - 이슈 트래커(Jira)를 통한 이슈 모니터링
    - 산출문서 (UML등)의 정기적인 검토?
    - 책 (51-53p)  
        * 자동차 업체들은 개발 모니터링/통제를 위해 개발 프로세스상에 검토(review)/품질감사(audit)/거동평가 등의 확인 측정 단계를 정의
        * FIMA (failure mode and effect analysis)나 초도픔 검사 (ISIR, Initial sample inspection report)를 수행


#### 위험관리 수행
> 위험관리의 개념과 활동을 설명할 수 있다

책 114p부터

> 결함관리의 개념과 활동을 설명할 수 있다

책 126p부터 (`FMEA`)
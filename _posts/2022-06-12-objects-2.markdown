---
layout: post
title:  "Objects - 코드로 이해하는 객체지향 설계 Chap7, 8, 9"
date:   2022-06-12 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---

많다 ㄷㄷ 바쁘다

> 설계는 코드 배치 방법이며 설계가 필요한 이유는 변경에 대비하기 위한 것이라는 점을 기억하라

### Chap 7
단기기억 = 5개정도까지
- 추상화 (중요한 부분만) + 분해를 통해 문제를 해결
- 객체지향은 `데이터 추상화`에 속함 (역할이 있고 책임을 수행하는 객체들로 시스템을 분해)


#### 추상화의 분류
- `프로시저 추상화`: SW가 무엇을 해야 하는지 추상화
  - `기능 분해` = `알고리즘 분해`
- `데이터 추상화`: 소프트웨어가 무엇을 알아야 하는지 추상화
  - 데이터를 중심으로 타입을 추상화 - (?)
  - 데이터를 중심으로 프로시저를 추상화 - __객체지향__


#### 메인함수로서의 시스템
- 프로시저도 일종의 추상화임 (인터페이스만 알면 사용가능). But 한계가 있음
- 보통 탑다운 (시작: main)식으로 분해, 하위로 갈수록 구체적/상위는 추상적 함수
- 마크다운 리스트 식으로 분해


1 -> 2 -> 3
1. 직원의 급여를 계산한다
2. 직원의 급여를 계산한다
  - 사용자로부터 소득세율을 입력받는다
  - 직원의 급여 계산
  - 양식에 맞게 결과 출력
3. 직원의 급여를 계산한다
  - 사용자로부터 소득세율을 입력받는다
    - "세율 입력하세요"를 화면에 출력
    - 키보드로 세율 입력받음
  - 직원의 급여 계산
    - 전역번수의 직원 기본급 정보 가져옴
    - 급여 계산
  - 양식에 맞게 결과 출력
    - "이름: {직원명}, 급여: {계산된 금액}" 형식으로 출력문자열 생성

특징
- 시스템을 메인함수로 간주
  - 각 단계는 다 함수 (sub procedures)임
  - 시스템 = 함수들의 트리
  - 단계적이고 체계적임. BUT `문제는 우리가 사는 세계는 그렇게 체계적이지도, 이상적이지도 않다는 점이다` ? 뭔가 너무...말이 추상적인데
- 기능을 중심으로 필요한 데이터 결정 - 이거 틀린건가? 메시지를 중심으로 결정해야 하나
- 유지보수 관점에서 문제가 있음
  - __처음부터 구현을 염두에 두기 때문에 (?)__ 프로시저간 temporal dependency (predecency)가 강제됨. 유연하지 못함
  - 실행순서나 조건, 반복 등의 제어구조를 미리 결정하지 않고는 분해를 진행할 수 없기 떄문에 기능분해 방식은 중앙집중 제어 스타일이 되기 쉬움 - 동격의 객체들이 협력하는 시스템이 되기 어렵다~?
- 데이터 변경 영향 컨트롤이 힘듬
  - 객체지향의 캡슐화에 대응하는 개념이 없음
  - 객체지향은 인터페이스 + 타입 (정보은닉 + 모듈화)로 벽을 세울 수 있는데, 하향식에는 인터페이스만 있음

음..결국 객체지향이 기능분해 (=프로시저 추상화)보다 좋은 건 __데이터와 연산을 모아놓았다는 것__
  - "타입"을 스스로 정의가능
  - 타입에 대한 추상화 가능 (핵심만 + 이해 쉽게)
    - 상속을 통해 타입에 대한 계층화 + 자동 위임도 가능 (코드 재사용은 x)


#### 모듈
- 기능을 기반으로 시스템을 분해하는 것이 아니라, 변경의 방향에 맞춰 시스템을 분해해야 함
- 변경의 방향 = 디자인패턴?

`정보 은닉` (information hiding)
- 무지성 getter/setter가 아니고, __시스템에서 자주 변경되는 부분을 상대적으로 덜 변경되는 안정적인 인터페이스 뒤로 감춰야 한다__ 는 것
- 모듈은 서브프로그램이라기 보단 책임의 할당이다
- __모듈과 기능분해는 상호베타적이 아니다__
  - 시스템을 모듈로 분해 (자주 변경되는 부분을 인터페이스 뒤로 숨긴 뒤)한 뒤, 기능분해를 사용해 구현 내용 정하면 됨

모듈은 다음 두 가지 비밀을 감춰야 함
- `복잡성`, `변경가능성`
- 시스템의 가장 일반적인 비밀은 데이터임
  - `데이터 캡슐화`: 데이터와 메서드를 하나의 단위로 통합하고, 퍼블릭 메서드를 통해서만 접근하게 하는 것
  - 정보은닉화의 실행 방법인 캡슐화의 한 방법

모듈의 장단점
- 장점: 변경의 경계를 제공, 비즈니스 로직과 인터페이스에 대한 관심사를 분리가능 (비즈니스 로직에서 모듈을 갖다 쓰기만 하면 됨), 전역xx제거 -> ns오염 (충돌) 방지
- 단점: 단일 객체 레벨의 추상화가 안됨 -> `추상 데이터 타입` 필요!

#### 추상 데이터 타입 (ADT)
- "직원의 급여를 계산한다" 자체를 추상화 하기보단, 직원과 급여라는 추상적인 개념을 떠올리고, 이 추상적인 개념들 (인터페이스)를 이용해 '계산'이란 동작을 수행

`타입` : 변수에 저장할 수 있는 것 + 변수에 적용될 수 있는 연산을 의미

추상 데이터 타입의 기본 의도 - built in type과 동일한 타입을 추가할 수 있게 해 줌
- 그럼 클래스는 추상 데이터 타입인가?
  - 추상 데이터 타입은 상속, 다형성을 지원하지 않음
  - 상속처럼 (직원 -(상속)-> 정규직원/알바직원)의 구조를 못 만드는 듯
    - 책의 ADT 에제에서는 함수에서 hourly변수로 타입을 넘겨받음 (허허...)
    - ADT는 오퍼레이션을 기준으로 타입을 묶음. 객체지향은 타입을 기준으로 = 데이터 추상화
  - 타입 추상화에 ADT, 객체지향이 속하고 객체지향은 또 따로 데이터 추상화 기법이다?

타입을 기반으로 절차(프로시저)를 추상화하지 않았다면 그것은 (클래스를 썼더라도) 객체지향 분해가 아니다
- 타입체크 조건문을 다형성으로 변경 -> 변경을 기준으로 객체지향 분해를 한 것
- 단순히 `객체지향이란 조건문을 제거하는 것` 보다는, `클라이언트가 객체의 타입을 확인해서 넘겨주는 것이 아니고, 객체가 메시지를 처리할 메서드를 선택한다`로, 주도권이 어디에 있는지 (자율적) 보면 될 듯
- 변경 시 (기존 코드를 안건드리고) 새 타입을 추가하기만 하면 됨 - `OCP`!


그럼 항상 ADT < OOP인가? - __변경의 방향에 따라 다름__
- 타입 추가가 잦다 = OOP
- 오퍼레이션 추가가 잦다 = ADT (OOP는 오퍼레이션 하나가 늘어날 때 마다 모든 서브클래스를 다 찾아가서 수정해야 함. ADT는 모든 타입을 어케 처리할 지 한곳에 모여있음)


### Chap 8
의존성 관리하기

> 잘 설계된 객체지향 앱은 작고 응집도 높은 객체들로 구성된다. 작고 응집도 높은 객체란 책임의 초점이 명확하고 한 가지 일만 잘 하는 객체를 의미한다. 이런 작은 객체들이 단독으로 수행할 수 있는 작업은 거의 없기 떄문에 (...잘못이해하면 자율성이 없다고 볼 수도 있는 듯 ㅋㅋ) 일반적인 앱 기능을 구현하기 위해선 다른 객체와 협력해야 한다

협력 -> 다른 객체에 대해 알아야함 -> 의존성 생김
- 객체지향 설계 = 의존성을 관리하는 것, 객체가 변화를 받아들일 수 있게 의존성을 정리하는 기술

#### 의존성 이해하기

객체가 작업을 수행하기 위해 다른 객체를 필요로 하는 경우

ㄴㅍ
분류
1. 실행시점
  - `런타임 의존성`: 실행시점. 객체 간의 의존성
  - `컴파일 의존성`: 실제 컴파일시점일 수도 있고, 코드상 (ex - python)일수도 있음. 클래스 간,  코드의 구조 상의 의존성
  - 둘은 다를 수 있음 (ex - 인터페이스에 의존하는 경우, concrete객체와 클라이언트 간에는 런타임 의존성, 인터페이스와 클라이언트 간에는 컴파일 의존성만 있음)
  - 컴파일타임 구조와 런타임 구조 사이의 거리가 멀수록 설계가 유연해지고 재사용가능하다
    - 거리가 멀다 = 협력할 concrete class가 인터페이스 뒤로 잘 감추어져 있다
    - 컴파일 시점의 구조와 실행시점 구조 사이에 차이가 있기 떄문에 코드 자체가 시스템의 동작방법을 전부 보여줄 수 없다. 시스템의 실행시점 구조는 언어가 아닌 설계자가 만든 타입들 간의 관련성으로 만들어진다. 그러므로 객체와 타입 간의 관계를 잘 정의해야 좋은 실행구조를 만들 수 있다 [GOF94]
    - 대신 거리가 멀어질 수록 이해하기 어려워진ㄴ ㄷㅅ
2. 변경가능성 (의존성은 변경가능성을 imply함)
  - 직접적, 간접적 의존성 (의존성 전의에 의해 전파되는 경우)


#### 컨텍스트 독립성
concrete class에 의존한다 - 컨텍스트에 결합됐다
1. Movie클래스가 PercentDiscountPolicy클래스에 의존적이다 - 비율 할인 정책이 적용되는 컨텍스트에 결합됨
2. Movie클래스가 DiscountPolicy 인터페이스에 의존적이다 - 컨텍스트는 런타임에 정해질 것 (객체가 컨텍스트에 독립적)

객체가 컨텍스트 독립적 = 클래스가 사용될 문맥에 대해 최소한의 가정만으로 이루어져 있음. 문맥별로 재사용하기 수월
- __행위의 단위 (객체!)__ 를 가지고 새로운 컨텍스트에 쉽게 적응가능
- 응집력있는 객체를 만들고 객체 구성방법을 재정의해서 변경가능한 시스템으로 나아갈 수 있다


#### 의존성 해결하기
`의존성 해결`: 컴파일타임 의존성을 실행컨텍스트에 맞는 적절한 런타임 의존성으로 교체하는 것
1. 객체 생성자로 교체
2. 생성 후 setter로 교체 - 객체생성후에도 변경가능하지만 첫 번째 setter 호출까지는 불완전함
  - 1 + 2가 보통 많이 쓰인다 함 (불완전함 해결)
3. 함수 param으로 넘기기 - 지속적인 의존관계가 필요없을 경우, 메서드 실행시마다 의존관계가 달라져야 하는 경우에 쓰면 좋음 (예외 느낌인듯)


### Chap 9 유연한 설계 (원칙)

#### OCP
로버트 마틴?

> SW개체 (클래스, 모듈, 함수)는 `확장`에 대해 열려 있어야 하고 `수정`에 대해서는 닫혀 있어야 한다

- 확장 = 동작추가
- 수정에 닫혔다 - 동작이 추가됐을 때 기존 코드를 수정하지 말아야

어떻게 가능한가?
- 사실 런타임 / 컴파일타임 의존성에 대한 이야기임
- 컴파일타임 의존성을 내버려 두고, 런타임 의존성을 수정하라는 이야기
  - 이렇게 하려면 __추상화에 의존__ 해야 함 (핵심)
  - 추상화로 문맥에 불변하는 부분 (= 변경에 닫히는 부분)만 남김 - 런타임에 나머지 부분 체워넣기
  - 수정의 영향을 최소화하기 위해선 모든 요소가 추상화에 의존해야 한다

> OCP를 준수하는 코드를 짜기 위해선 변하는 것과 변하지 않는 것이 무엇인지 이해하고 이를 추상화의 목적으로 삼아야만 한다


#### 생성 사용 분리

특정 객체가 다른 객체의 인터페이스에 의존하기 위해선, concrete 객체를 직접 만들면 안됨
- "특히 객체 생성에 대한 지식은 과도한 결합도를 초래하는 경향이 있다"
- 어딘가에서 객체를 만들긴 해야 함 - `SRP`를 생각해보면, 객체 생성/사용은 다른 객체에서 이루어지는 것이 좋음

클라이언트가 특정 문맥에 엮어도 상관없으면, 클라이언트에서 만들면 됨
- 아니라면, 객체 생성 전담 객채를 만들어서 객체 생성 책임을 넘기면 됨 (`FACTORY`)


객체 분해의 두가지 방식 (크레이그 라만? 뭐하는분임 ㄷㄷ)
- `표면적 분해` (representational decomposition): 도메인 모델의 개념/관계를 따르며, 도메인과 SW갭을 최대한 줄이려고 함
- `행위적 분해` (behavioral decomposition): ?

RECAP: `Information expert`: 필요한 정보를 가장 많이 알고 있는 도메인 객체에게 책임을 넘겨라

But 시스템 구동에 필요한 모든 책임을 도메인객체에게 넘기면 설계가 너무 더러워짐 (high coupling, low cohesion)
- `Pure fabrication`: 도메인엔 존재하지 않지만, 책임을 할당하기 위해 창조되는 인공객체
  - 보통 특정한 행동이 필요해서 만들었기 때문에, 그 행동을 표현하는 것이 일반적 (보통 행위적 분해에 의해 생성)

이런 측면에서 OOP가 실세계의 모방이라는 말은 옳지 않다
- 인공객체들이 더 많은 비중을 차지하느 것이 일반적 (도메인을 엄격하게 따르기 vs 변경에 강한 코드 트레이드오프의 결과로서)


#### 의존성 주입 (Dependency Injection)
특정 객체를 사용하는 객체가 아닌, 외부의 다른 제 3의 객체가 만들어서 의존성을 해결하는 방법

의존성 해결 - 컴파일/런타임 의존성의 차이를 해결하기 위한 방법

의존성 주입은 의존성을 해결하기 위해 의존성을 객체의 퍼블릭 인터페이스에 명시적으로 드러내서 외부에서 필요한 런타임 의존성을 전달할 수 있도록 만드는 방법을 포괄하는 명칭
- `생성자 주입` - 생성자에서 concrete 객체 주입
- `setter 주입` - 런타임에 의존성 변경가능. 초반에 붕 뜨는거 있음
- `메서드 주입` - 의존성이 한시적일경우. 이걸 주입으로 봐야할지 논란이 있음 (저지 - 의존성을 해결하긴 하니까 여기 넣었다고 함)

프로퍼티 주입 (from 씨샵) = 세터 주입 (from 자바)

#### 숨겨진 의존성은 나쁘다
`service locator`: 외부에서 의존성을 전달받는 DI와 달리, 객체가 직접 service locator객체에게 의존성 해결 요청
- 서비스를 사용하는 객체와, concrete 서비스 객체 간에 서로를 전혀 몰라도 되게 해 줌
- 편하긴 한데, __의존성을 감춤__ - 이해하기 어려움

의존성을 감추는 코드는
- 관련 문제가 컴파일타임이 아닌 런타임에 가서야 발견된다
- 유닛테스트 만들기도 어렵다 (단위테스트를 고립시켜야 함 - 매 유닛테스트마다 service locator 객체를 새로 만들고 그 중 극히 일부만 사용)
  - 문제는 숨겨진 의존성이 캡슐화를 위반했기 때문

> 캡슐화는 코드를 읽고 이해하는 행위와 관련이 있다. 클래스의 퍼블릭 인터페이스만으로 사용법을 이해가능한 코드가 캡슐화 관점에서 훌륭한 코드다. 구현 내부를 뒤져야 한다면 그 클래스의 캡슐화는 무너진 것이다

> 직접 객체를 넘기는 방식이 코드를 읽기 어렵게 하기도 한다. 로그나 메모리관리 정보가 모듈의 공개 API에 포함되어선 안된다. 또한 어떤 시스템은 본질적으로 하나이다. 대부분의 게임플랫폼에는 오디오/디스플레이 시스템이 1개뿐이다. 이런 환경적인 특징을 10겹의 메서드 계층을 통해 전달하는 것은 쓸데없는 복잡성을 늘리는 셈이다 [Nystrom14] - 싱글톤/서비스로케이터 패턴 등 사용가능

#### 의존성 역전 법칙 (Dependency Inversion Principle, DIP)
high lvl클래스가 low lvl 클래스에 의존한다면
- 해당 high lvl클래스를 재사용할떄마다 low lvl의, concrete class도 따라옴 -> 특정 컨텍스트 사용을 강제함
- 둘 다 추상화에 의존해야 함


DIP
- 상위수준 모듈은 하위수준 모듈에 의존해서는 안 된다. 둘 다 추상화에 의존해야 한다
- 추상화는 구체적인 사항에 의존하면 안 되고, 구체적인 사항이 추상화에 의존해야 한다

왜 `inversion`
- 추상화가 구체적인 것에 의존하게 되는 절차지향 프로그래밍과는 다른 방향이기 떄문


패키지 레벨 DIP
- 고수준 클래스와 저수준 클래스가 동일 모듈에 묶임 -> 고수준 클래스 사용할때마다 저수준 객체도 컴파일됨
- 고수준 객체는 고수준끼리 묶고, 저수준은 분리하는 것이 좋다

#### 유연성에 대한 조언
305p는 걍 펴서 읽어보면 좋음

유연하고 재사용 가능한 설계 = 런타임/컴파일타임 의존성을 분리하고, 단일 컴파일타임 의존성으로부터 다수의 런타임 의존성을 만들 수 있는 코드구조
- 단순함/명확함의 미덕은 버리게 됨
- 설계가 유연할수록 클래스 구조(컴파일)와 객체 구조(런타임) 사이는 멀어진다 = 트레이드오프가 있음. `아직 일어나지 않은 변경은 변경이 아니다`!

협력과 책임이 중요하다
- 객체 생성에 대한 고민은 맨 나중에 해도 됨

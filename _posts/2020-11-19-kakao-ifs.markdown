---
layout: post
title:  "kakao ifs"
date:   2020-11-13 05:04:00 +0900
categories: coding
use_math: true
tags: coding python
---


<a href="https://if.kakao.com/" target="_blank">https://if.kakao.com/</a>


### 개인화 "콘텐츠 푸시" 고도화 후기 (2020)
- <ㅁ ㅗㄱㄷㄹ=>
- 콘텐츠 선정 / 발송량 선정 / 선호도 예측 / 자동화


#### 문제정의, 설계
- `컨텐츠 푸시`의 이유 : 유저 활성화
  1. 활성화 1 : 비활성 유저 활성화 __(발표 주제)__
    - 유저에 대한 접근체널이 거의 푸시밖에 없다고 함
  2. 활성화 2 : 기존 유저 활성화
    - 푸시 이외에 다른 체널이 있다고 함
- 활성화 상태 : 주1회 이상 접속
- `WAU` : weekly active user, 주간활성유저

비활성 유저
- 푸시 클릭율이 떨어짐
- `누구나 좋아할 만한 컨텐츠` (?)
  - 빅이슈 (정상회담), 경사
  - 흔하지 않다고 함 (희소하므로 좋은 것)
  - 여기에 의존적이지 않은 푸시가 필요

> 목표 : 누구나 좋아할 콘텐츠를 보냈을 떄와 같은 수준의 WAU달성


#### 문제해결

전략, 목표
- 유저별 푸시는 주1회로 제한
- WAU수치 자체를 직접 최적화하긴 어려움
  - __대리 지표__ 사용 (proxy metric)
  - `클릭율 개선치` : 현재 컨텐츠 푸시 클릭율 / 대상 유저들의 평소 푸시 클릭율
    - 클릭율이 낮은 유저들이  클릭했을 시 높아짐
    - 목표 수치 : 2.4 (평소 클릭율 대비 2.4배 증가)
- 전략 : 개인화

__자동화 푸시 시스템__ : 컨텐츠 선정 \\(->\\) 개인화 선호도 예측 \\(->\\) 발송량 설정/발송 \\(->\\) 결과 분석 \\(->\\) 처음으로
1. 컨텐츠 선정
  - 컨텐츠 생성 30분후 푸시 발송여부 판단
  - 제목 + 본문 기반 모델링
  - `gradient boosting` ?
  - 컨텐츠 별로 발송량을 설정함? (200~300?) 유저가 기준이 되어야 하는 것 아닌가? 
  - 제목 자동 설정 : 템플릿 기반, A/B테스팅을 통해 결정
2. 개인화 선호도 예측
  -  각 컨텐츠별로 발송량 내에서, 선호도가 높은 유저에게 보냄
  -  content based (word embedding)
  -  `CTR` (click through rate) prediction
     -  과거 클릭 모델링. collab filtering 인듯
  - looklike
    - '해당 컨텐츠에 대한 선호가 확실하게 판단되는 유저군과 유사한 유저군을 찾는 방식'
    - 유저 기반 nearest neighbor?
3. 컨텐츠의 발송량 설정 (`재발송이 성능 향상에 기여가 컸다고 함`)
  - __처음에는 소량,__ 유저반응 확인 (클릭율 개선치), 좋으면 발송량 늘림 (`feedback loop`)
    - 컨텐츠가 시즌성(?)이 강함 : temporal dynamic이 큰 듯. 따라서 처음에 일부 유저만 대상으로 소량만 보냄
    - 목표치보다 낮아도, 신뢰구간 안에 목표치가 들어오면 다시 보내본다고 함
    - 신뢰구간 : 정규분포 cdf 사용 (central limit theorem)
4. 기타 이슈
  - 비활성 유저들의 모델링이 어려움
  - 푸시 피드백 속도가 느림
  - 컨텐츠 수명이 짧음 (뉴스 라이프사이클 = 3~4시간)


### Bufflo (2019)
- `matrix factorization`
- priority: scalability가 최우선 (만족X시 적용자체가 불가능), 성능이 그 다음이었다고 함
- `최적화된 Python/C++ 코드베이스와 병렬처리를 효과적으로 구현`
  - python/c++ : gil처리는 Cython의 nogil context로만?
  - openMP의 dynamic scheduling이외에 개선점?
- 기본적으로 sparse matrix대응이 되어있다고 함. sparse mat 행렬곱을 못 본거 같은데..못찾았거나 라이브러리에서 해 주는 건가?



### 둥꿍둥꿍 느낌 아는 음악 바텐더 (2019)
- VGG-like feature extractor (음악을 퓨리에변환한 것을 자른 mel-spectrogram - 감성tag predict)는 크게 좋지는 않았다고 함
- matrix factorization
- 선택한 곡 목록 (playlist?) 기반 autoencoder - feature vector추출
  - `denosing` autoencoder
  - + tag output header
- 이후 cosine 유사도부터 다시 보기



### 추천 시스템 맥락과 취향 사이 (2020)

---
layout: post
title:  "Architecture patterns with Python (+DDD)"
date:   2021-10-03 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---

> Architecture Patterns with Python, Percival, Harry; Gregory, Bob. O'Reilly Media. Kindle Edition. 

[https://github.com/cosmicpython/book](https://github.com/cosmicpython/book)


시스템이 지켜야 하는 규칙/성질(constraints)를 유지하면서 시스템을 개발하려면, 컴포넌트 갯수가 커질수록 제곱으로 어려워질 수 밖에 없음
- constraints가 필요없으면 엑셀로 짜면 됨
- constraints를 domain model에 몰아넣고, 각자는 abstraction에 의존적이게 개발 (dependency inversion)

유즈케이스가 도메인 모델의 클래스/함수가 되고, orchestration은 서비스 레이어에서 담당

### Intro
- Encapsulation
  - simplifying behavior AND hiding data
  - in DDD, we use former def mainly
  - __Encapsulating behavior by using abstractions__ is a powerful tool for making code more expressive, more testable, and easier to maintain (by avoiding Big Ball of Yarn)
  - OOP languages : abstract base class, Python - duck typing is often enough
- `Layered architecture`: Presentation layer (UI) -> Business logic (app) -> Database layer
  - common approach to structuring a system that has a UI, some logic, and a db.
- `DIP`: Dependency inversion principle (D in SOLID?)
  1. High level modules should not depend on low level modules. Both should depend on abstractions
  2. Abstractions should not depend on details. Instead, details should depend on abstractions.

- `High-level modlues`: functions, classes, packages that deal with our real-world problems
- `low-level modules`: HTTP, uWSGI, nginx, ... ones that business owners never cares
- `Depends on`: does not mean specific, technical things (imports, calls). Rather it simply means that one __knwos about or needs__ the other module.

> So the first part of DIP says that our business code should not depend on techincal details; instead, both should use abstractions

- `Abstraction`: simplified interfaces that encapsulate behavior
  - why depend on abstraction? -> we want to change each items seperately


3 layered architecture
- Presentation layer
- Business logic
- Database layer

`dependency inversion principle`: depend on a thin abstraction

### Chap 1 Domain modeling
- how we can model business processes with code, in a way thats highly compatible with TDD

- __business logic layer = domain model__
  - `domain`: (a fancy way  of saying) the problem we want to solve
  - `model`: map of process that captures a useful property
  - `domain model`: mental map that business owners have of their business
    - 비즈니스 오너들의 멘탈 모델을 그대로 구현하는 것이 좋다고 함 (이미 문제를 잘 표한하고 있는 사람들이므로)
    - When we hear our business stakeholders use unfamiliar words, or using tems in a specific way, we should listen to understand the deeper meaning and encode their hard-won experience into our service
- DDD says that the most important thing about software is that it provides a useful model of a problem
  - 가장 중요: 딴 것들 (especially tech details)이 도메인 모델에 의존적이여야 함
- Explore the Domain Language
  - domain expert들이 사용하는 언어를 도입하는 게 좋음. 이미 문제에 대한 abstraction이 충분이 잘 돼 있음.

#### Domain language
- Product ID = SKU
- Customer places orders
  - Order (pk = order reference)
    - can have multiple products (SKUs) 
    - composed of `order lines` (= an unique SKU and quantity)
- batch = 도매상으로의 주문 (pk = batch reference, a SKU, quantity, ETA (도착기간))
- __we need to allocate order lines to batches__ 
- `allocation` : concept of linking an OrderLine to a Batch
  - we store allocation as a collection on our batch object (as as set)

#### 코드
- Orderline 클래스는 `@dataclass(frozen=True)`로 잠궈놓음
  - `value object` : definde by its attributes. 보통 임뮤터블하게 해 놓음
  - 해쉬 자동으로 생성해 주는 듯
- `entity` : identity를 가지고, 식별되는 것 (with PK)
  - "We use the term entity to describe a domain object that has long-lived identity"
  - `__eq__, __hash__` 구현하면 편하나 해시 구현 시 조심해야 함
- `domain service function`: entity나 value object가 아닌 것 (ex - allication of order line to batch)
- exceptions can be uised to express domain concepts too

<img src="{{ site.url }}/images/coding/python/../../../../../images/coding/python/ddd_1.gif" class="center" style="width:300px"/>
- <a href="https://github.com/Dev-Nebe/architecture-patterns-with-python/blob/master/src/allocation/domain/model.py" target="_blank">코드</a>를 보면, `allocate()`는 실제로 batch의 동작에 의존함. order_line도 파라미터로 받긴 하는데 얘한테 의존하는 건 없음 (order_line의 동작이 바껴도 allocate에 영향 X)


### Chap 2 Repository pattern
- ... to use the dependency inversion principle as a way of decoupling our core logic from infrastructural concerns
- ... but we want our domain model to have no dependencies whatsoever. We don't want infra concerns bleeding over into our domain model and slowing our unit tests or our ability to make changes.
  - model inside, dependencies floowing inward to it; `onion architecture`

`Repository pattern`: a simplifying abstraction over data storage, allowing us to decouple our model layer from the data layer.
- we want our domain model to have __no dependency whatsoever__
  - we'll think of our model as being on the inside, and dependencies flowing inward to it (`onion architecture`)

`@abc.abstractmethod` is one of the only things that makes ABCs actually work in Python

#### ORM
- normal ORM way : model depend on ORM (model is defined with ORM)
  - pros of ORM: `persistence ignorance` (do not need to care how the date is stored in persistent manner)
- __INVERTING THE DEPENDENCY__: ORM depends on Model
  - define schema explicitly, and to define an explicit mapper for the ORM (`classical mapping` in SQLAlchemy)
  - the ORM imports (or "depends" or "knows about") the domain model, and not the way around


#### The Repository Pattern
Create ABCRepository class
  - can easily introduce new ORM
  - fake ORM (not the "mock" - 모킹은 "같은 종류"의 가짜 객체를 제공해 주는 거인듯)
  - no need to use ABC class. duck-typing is often sufficient in real fields (too easy to ignore them)

Trade-off
- introducing additional layer of abstraction
  - make easy to make a change (fundamental) to they way we store things
  - easy to fake unit test

#### Port and Adapters
- port = interface (abstraction)
- adapter = implementation (instance) of port

### Chap 3 On copuling and abstractions

> A key theme in this book ... is that we can use simple abstractions to hide messy details.

In a large-scale system, we become constained by the decisions made elsewhere in the system (coupling)
- __locally__, coupling is a proof that your module is related
- __globally__, coupling is a nuisance (increase the cost of code change, exponentially)
   - we can reduce the degree of coupling, by abstracting away the details

#### Abstracting states aids testability
make stateful component explicit and plug-and-playable

- 폴더 비교 및 sync 기능 구현
- 그냥 짜면 os.listdir / hashlib (체크) / shutils (복사) 범벅이 됨. 근데 이건 사실 `core functionality`가 아님 (tightly coupled with file I/O)
  - core는 파일을 비교하고 적절한 연산을 해 주기만 하면 됨. 이 부분을 구현하고, IO관련 부분은 주입하면 됨
  - 이 core는 external state에 의존적이면 안됨. 들어온 입력에 대해 항상 일정해야 함.
  - core = `bueiness logic`

> We're going to seperate `what` we want do to from `how` we do it. 띵언 ㄷㄷ

이러면 테스트 시 DI를 사용해 간편하게 테스트를 만들 수 있음 (aids testability)
 - `edge to edge testing`
 - DI는 굳이 ABC로 짤 필요 없음. duck typing에만 의존해도 됨.
 - file mocking (=patching out dependency) 도 나쁘지 않지만, 결국 이 과정을 통해 stateful한 부분을 core logic과 분리하는 것 자체가 좋음.

> We view TDD as a design practice first and a testing practice second (2차 띵언 ㄷㄷ)

 - The tests act as a record of our design choices, and serve to explain the system to us when we return to the code after a long absence
 - Tests that use too many mocks get overwhelmed with setup code that hides the story we care

In summary
- We can make our systems easier to test and maintain by simplifying the interface between our business logic and messy I/O. Finding the right abstraction is tricky, but here are a few heuristics and questions to ask yourself.
  - Can i choose a familiar Phtyhon data structure to represent the state of the messy system and then try to imagine a single function that can return the state?
  - Where can I draw a line between my systems?
  - What is a sensible way of dividing things into components with different responsibilities?
  - What are dependencies, and what is the core business logic?


### Chap 4 Service Layer

> we discuss the difference between orchestration logic, business logic, and interfacing code, and we introduct the `Service Layer` pattern to take care of orchestrating out workflows and defining the use cases of our systems

orchestration
- 디비에 쿼리 날리기
- 입출력 / 포멧 검사
- 에러 처리하고 (이건 presentation layer에서도 일부?)
- 결과 디비에 커밋 등 updating domain models
 
이것들을 domain model이 알아야 할 필요는 없음
- 반면 presentation layer에 있으면, e2e 테스트가 커져버림 (역삼각형 테스트 구조)
    - \\(\rightarrow\\) api구현에서 분리해서 새 레이어로 (`orchestration layer` = `service layer`) 만들고, 유닛 테스트에 orchestration test 넣기
    - 도메인 모델에 대해 테스트를 짜지 말고 (도메인 모델 변경할때 부담됨), 도메인 모델을 사용하는 서비스 레이어에 대해 테스트를 짜야. 근데 도메인 모델에 abstraction이 없는 한 그게 그거인 듯
    - 그럼 이전에 도메인 모델에 대해 직접 짰던 테스트는 무쓸모인가? -> 디자인 초기단계에서 서비스에 대한 concrete understanding을 줬음. domain model에 대한 문서와 동일!
    - 대부분 프로젝트 초기 단계에선 도메인 모델에 대해 직접 테스트를 짜게 된다고 함 (low gear) -> 이후 high gear (introduct service layer / UOW / ...)
    - 또는 거지같은 문제를 완전 초기단계부터 디버깅할 때도 low gear...
- 서비스 레이어에선 도메인 모델을 쿼리 날려서 얻고 도메인 모델의 함수 (= 도메인 서비스. 서비스 레이어의 서비스와는 다른 의미)를 호출
- e2e 테스트에선 웹 관련 테스트만 하면 되고, API에선 web stuff (json파싱, HTTP코드 등) 만 하면 됨

서비스 레이어는 유즈케이스를 구현하는 곳?

결국 abstraction을 하나 더 추가하는 것이므로 분명히 트레이드오프는 있음


#### Chap5 - Fully decoupling the Service-Layer tests from the domain
1. servicel layer 함수들이 domain model 객체를 직접 받아서 의존성이 있음 -> sku, qty, orderid 등의 정수/string만 받게 변환
2. 다만 테스트들에서는 아직도 domain model을 직접 선언 -> 일단 fixture에 몰아넣고 나중에 바꾼다고 함
   - 이 경우, service layer가 불완전한 것임. 도메인 모델을 (어디에선가. 메모리의 fake객체나 디비에서나) 가져오는 서비스레이어 함수를 추가해야 함

책에서 `/add_batch`에 POST로 배치 추가를 더했는데, Restful하게 짜려면 `/batch`에 POST임

#### Wrap-up

Recap
- write bluk of your tests against the service layer (e2e로 말고)
- Aim for 1 e2e test per feature: 위의 service layer대상 테스트를 gluing하기, 동작하는지 여부 정도만 체크
- Maintain a small core of tests written against your domain model
  - 도메인 모델에 직접 하는 테스트는 highest feedback을 줌
- error handling counts as a feature (?)



### Chap 6 UoW pattern

`UoW`: Unit Of Work
- ties together the Repository and Service Layer patterns
- abstraction over the atomic operations
- 이전에는 flask api가 직접 service layer를 접근 -> service layer는 직접 db와 통신
  - 이젠 UoW을 만들어 서비스에 넘겨주고 (?), service layer는 db에 직접 통신하지 않음 (UOW실행)
- 파이썬에선 컨택스트 매니저로 실행
  - context manager is a nice pythonic way of visually grouping code into blocks that we want to happen atomically (with `__enter__`, `__exit__`, commit (flush) and rollback)


atomic = ready for multiprocessing/threading이 아니고, 여기선 묶여서 실행되거나 전부가 실패하거나임

> The UoW acts as a single entrypoint to our persistent storage, and it keeps track of what objects were loaded and of the latest state

This gives us
- a stable snapshot of the db to work with
- a way to persistent all of the changes at once -> willnot commit if sth goes wrong


일단 구현상에는 컨텍스트 매니저를 사용하는 ORM임 (domain model add / fetch 등만 가능한)
- commit / rollback이 잘 작동하는지 테스트 추가해야 함

난 첨엔 연산들 여러개를 그냥 실행하면 non-atomic한데 atomic하게 실행되게 묶은 건줄 알았음
 - 근데 이 구현대로라면 묶은 뒤 commit하는 건 service layer이고 `UoW`는 commit / rollback으로 __persistency만 보장하는 듯__

`SQLAlchemy`에는 이미 컨텍스트 매니저조차 있음. 나름 thread-safe 하기도 한 듯?


Recap
- UoW is an abstraction around data integrity
  - enforce consistency of our domain model, better performance with minimal flush
- Works closely with the Repository and Service Layer patterns
  - 결국 무슨 연산을 묶을 것인지는 service layer에서 결정


Lastly, we're motivated again by the `dependency inversion principle`: depend on a thin abstraction


### Chap 7 Aggregates and Consistency Boundaries

aggregate는 도메인의 entrypoint이자 병렬처리의 단위이자 consistency boundary 임 (마지막은 UoW도...?)
 - [여기](https://stackoverflow.com/questions/14696568/avoid-unit-of-work-pattern-in-domain-driven-design) 서 보면, UoW가 aggregate를 묶는 용으로는 유용할 수도 있다고 함. aggregate끼리 묶은 연산도 consistent 하길 바라는 경우가 있을 수 있겠지..?

`CSV over SMTP`
- low initial complexity
- difficult to apply logic and maintain consistency (constraints)
  - reason why we introduced domain models

#### Aggregate



- cluster of domain objects (= a domain object) that we treat as a unit for the purpose of data changes (UoW랑 좀 겹치는 듯...)
  - domain object 1개가 서로 다른 aggregate에 들어갈 수 있나?
  - 쉽지 않을 듯. 해당 오브젝트를 얻을 수 있는 리소스 레벨에서의 lock 등이 고려되어야 할 듯 (서로 다른 병렬처리 루틴 안에서 호출될 꺼니까...) 
- 병렬처리의 최소 단위
- 코드에선 Product란 새 오브젝트를 만듬 (PK = sku)
  - db에 version number 저장 -> load때 버전넘버와 commit 바로전 버전넘버가 1 차이나야 성공, 아님 죽음
  - 디비에 concurrency controll의존
- Aggregate object 하나 당 디비 1개
  - domain object 1개가 서로 다른 aggregate에 들어가는 경우는 아무리 생각해 봐도 별로인 듯 
- entrypoint of the domain midel, in charge of a consistency boundary
- always need to consider the consistency issues

Optimistic / Pessimistic concurrency
- Optimistic: 병렬업데이트시 1명만 성공, 나머지는 exception
- Pessimistic: 처음부터 걸어잠금

새 테스트 추가 (중간에 sleep으로 길게 수행됨)


Pros
- chossing aggregates lets you decide which of your domain model classes are the publics, and which aren't
- aggregate is in sole charge of state change: clearer model

Cons
- explaining entities vs value objects was already mental load; now there's 3rd type!
- Dealing with eventual consistency between aggregates can be complex


### Part 1 Recap

- Our tests are living documentations: they describe our system
- decoupled infra parts of our system (db, api handlers) so that we can plug them into the outside of APP
- By applying the dependency inversion principle, and by using ports-and-adapters inspired patterns like Repository / UoW, we've make it possible to do TDD in both high and low gear, and maintain a healthy test pyramid
- consistency boundaries
  - we've been at pains to point out that each patterns comes at a cost (more complexity)


`PART II`: if aggregates are our boundary, and we can update only one at a time, how do we model processes that cross consistency boundaries?


### Chap 8 Events and the Message Bus

notification (ex - email)등은
- api단 (무슨 에러가 날 줄 알고)
- 도메인 모델 (도메인에 속하지 않음)

등에서 처리하기 애매함. Orchestration이라고 보면 서비스 레이어에 속하는 건 맞으나

> SRP: Single Responsibility Principle 

의 관점에서 보면, ex) `allocate을 하다가 터지면 메일을 보낸다`는 SRP에 위배될 수 밖에 없음
 - 또, 서비스 레이어가 구현에 종속되는 것 (이메일 - SMTP) 도 바람직하지 않음. DI를 도입해도 되긴 하는데..
 - \\(\rightarrow\\) 메시지버스 + 이벤트 드리븐!

메시지 버스: 이벤트를 핸들러에게 (어떤 방식으로든) 전달

#### 메시징 구현방법 1
1. 모델이 이벤트를 raise하고 저장 (도메인 모델의 관점에서는 이벤트를 저장하는 게 위배되지 않음)
  - we always name events in the language of domain, and we think of them as part of our domain model
  - (Python) dataclasses are great for domain events too
  - 도메인 모델의 함수 내 try-except에서 이벤트 raise
    - `code smell` here! -> [using exceptions for control flow](https://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why/189226) - 이거 꽤나 controversial한거 같은데
    - 나중엔 UoW로 다룸
2. 메시지 버스 -> 핸들러, handle함수 구현 (이벤트 목록을 받아 핸들러 적용)
  - 현재 concurrency 없음
  - 일을 main thread에서 넘겨주려면 celery 라이브러리 고려
3. 서비스 - 모델의 exception 발생시 모델이 갖고 있는 이벤트 파싱

#### 구현방법 2
서비스가 event raise

#### 구현방법 3
UoW가 이벤트 publishing하고 메시지 버스에 넘겨줌
- UoW는 컨텍스트 매니저이므로, 서비스는 UoW 컨텍스트에서 event raise만 하면 됨


When X then Y -> split
- treating events as first-class things in our model helps us make our code more testable and observable, and it helps isolate concerns
- a message bus provides a nice way to seperate responsibilities
- event handler are decoupled from the core app logic
- event driven workflow often can be confusing


이벤트 (메시지 버스)는 다수의 aggregate (transactional unit)들의 eventual consistency를 보장하는 좋은 방법임
- 현 레벨에서는 optional side effect 수준


### Chap 9 Going to Town on the Message Bus

... now everything goes via the message bus, and our app has been transformed to a message processor ...

제조사 이슈 등으로 batch가 삭제될 수 있음 -> 여기에 allocate된 orderline들을 재배치해야 함
 - 지금까지는 이런 룰을 바로 적용하기 어려웠음
 - `change_batch_quantity` 서비스 (deallocation -> allocation 수행)를 만들고, `AllocationRequired`이벤트 핸들러에 등록하면 됨

근데 이걸 하기 전에, 위를 보면 기존 서비스의 동작방식과 비슷
- ex) `Allocation` 서비스 함수: `AllocationRequire` 이벤트 발생시 수행
- 기존 서비스를 이벤트 핸들러로 변환 (Preparatory Refactoring: `Make change easy; then make the easy change`)
- we will refactor our service layer into event handler

이전에 리팩토링하면서, 서비스 레이어에서 도메인 모델을 받다가 primitive type (sku: string, ...)을 받게 바꿨음 (도메인 모델을 좀 더 자유롭게 바꿀 수 있도록)
- 이제 primitive type에서 이벤트로 다시 바꿀 것
  - 어떻게 보면 또 abstraction에 dependent하는 거니까 나빠지는것은 아닌 듯? (내 생각)
  - events are often translated really well into business language


UoW가 자기한테 등록된 product domain model (which is our entry point)에서 이벤트를 꺼내 주면 (함수로), 핸들러는 while루프 (이벤트 1개 처리 후 여러 새 이벤트가 등록될 수 있음)돌면서 이벤트 처리 
- 문제점 (나도 계속 생각했던 것): 현재 api단에서 처리결과를 알 수 있어야 함 (코드 반환을 해야함) -> 비동기적 메시지 핸들링과는 다르게 현재는 싱글쓰레드에서 돌고 있으므로 결과 반환 가능
- __its because we are mixing read and write responsibility in our system__. We'll come back to fix this in Chap12

> Our onging objective with these architectural patterns is to try to have the complexity of our app grow more slowly than its size. When we go all in on the message bus, as always we pay a price in terms of architectural complexity, but we buy ourselves a pattern that can handle arbitrarily complex reqs with out need any further conceptual / architectural change to the way we do things

### Chap 10  Commands and Command Handler

in chap9, we make `BatchCreated` before the batch was actually created - we need another concep to cover this

`commands`
- type of message (ofen a dump datastructure)
- imperative mood ("allocate stock", "delay shipment")
- commands capture `intent`. As a result, when they fail the sender needs to receive error information

`events`
- past tense ("order allocated to stock", "shipment delayed")
- spread the knowledge about successful commands. No obligation to notify the result

#### handling
- events cannot interrupt the flow, where commands can (by reraising exception)

what happens when event fails? how can I make system consistent in such cases?
- 실행이 aggregate단위로 transactional하기 때문에, 실패하면 aggregation전체가 실패할 꺼여서 걱정 없다고 함 (ㄷㄷ..?)

__commands should modify a single aggregate, and either succeed or fail in totality (and in notice)__

`Tenacity` is a python lib that implements common patterns for retrying

We're expressly inviting failure. We know that somethimes things will break,and we're choosing to handle that by making the failures smaller and more isolated. This can make the system harder to reason about, and requires better monitoring.


### Chap 11 Event-driven Architecture

... our app will receive events from __external sources__ via an external msg bus (via Redis pub/sub) and publish its outputs in the form of events to Redis pubsub

MSA적용할 때 - noun으로 보통 시스템을 구성
- 각 noun을 저장할 db / CRUD API를 설계하긴 쉬우나, 상호작용이 많아짐
  - 'noun A 가 B를 어떻게 한다' 식의 관계가 많아짐
- 비동기 메시징으로 시스템을 디커플링하면 좀 더 쉬워짐 (MSA)


> Things break is a universal law of software engineering.

- 각 microservice는 consistency boundary 가 되어야 함
- 메시지 브로커 : 레디스 펍섭이 제일 간단한 듯

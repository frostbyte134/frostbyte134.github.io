---
layout: post
title:  "몽고-디비"
date:   2022-03-01 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---

허허



https://docs.mongodb.com/manual/core/sharding-data-partitioning/
https://docs.mongodb.com/manual/core/sharding-balancer-administration/#migration-thresholds

MongoDB 는 데이터를 컬렉션 단위로 샤딩 (하나의 컬렉션이 쪼개져서 샤드에 분산)
- 샤드는 하나의 mongo replica라고 생각하면 될 듯 (replica sets). 작은 몽고 서버.
    - ex) xxx 클러스터는 50개 짜리 샤드
- 데이터를 쪼개는 단위는 도큐먼트가 아니라 chunk (default 64MB).이 크기보다 더 커져야 chunk 가 쪼개짐.
- 즉, 아무리 샤드가 많더라도 (작은 서버가 많아도) 컬렉션을 생성하고 데이터를 삽입하면 64MB 를 채우기 전 까지는 chunk 가 1개 \\(\rightarrow\\) 해당 데이터는 1개 샤드에만 있음. 데이터가 더 증가하면 (ex. 80MB) chunk 가 split 되고, 2개의 chunk 가 되면서 그 중 1개 chunk 가 다른 샤드로 이동
- 데이터가 작은 컬렉션은 chunk 가 자동으로 쪼개지지 않기 때문에 아무리 샤드를 늘려도 자동으로 데이터 분산이 되지 않음. (ex. 50개 짜리 샤드클러스터에 chunk 10개짜리 컬렉션이 있는 경우) 이런 경우 데이터 분산을 위해서 컬렉션을 수동으로 split 해주어야 하며, 샤드를 늘릴때마다 수동 split이 필요
    - 심지어 chunk 이동은 비용이 비싸기 때문에 MongoDB 는 완전 균등 분산을 하려고 하지 않음 (약간의 불균형은 그대로 유지) - 이 때문에 수동 split 은 생각보다 훨씬 더 많이 쪼개야 하는 상황이 발생 (?)

- 2.5만건이 엄청 큰 것은 아님
- OLTP성 쿼리는 보통 primary, OLAP는 secondary (내지는 전용 서버)
- OLTP, OLAP란? - 조사 필요


### glossary
<a href="https://docs.mongodb.com/manual/reference/glossary/#std-term-sharded-cluster" target="_blank">`sharded cluster`</a>
- The set of nodes comprising a sharded MongoDB deployment. A sharded cluster consists of config servers, shards, and one or more mongos routing processes. See Sharded Cluster Components.
`sharding`
- A database architecture that partitions data by key ranges and distributes the data among two or more database instances. Sharding enables horizontal scaling. See Sharding.
`shard`
- A single mongod instance or replica set that stores some portion of a sharded cluster's total data set. In production, all shards should be replica sets. See Shards.
### balancer
- <a href="https://docs.mongodb.com/manual/core/sharding-balancer-administration/#sharded-cluster-balancer" target="_blank">balancer manual</a>


### sharding
<a href="https://docs.mongodb.com/manual/sharding/" target="_blank">https://docs.mongodb.com/manual/sharding/</a>
- `Sharding` is a method for distributing data across multiple machines
- high query rates exhaust the CPU capacity, Working set sizes larger than the system's RAM stress the I/O capacity of disk drives
    - vertical scaling (scape up) / horizontal scaling (scale out)
    - __MongoDB supports horizontal scaling through sharding__

sharded cluster
- composed of shard (deployed as repica set) / mongos (query router) / config servers (stores metadata, config settings for the cluster)

shard key
- 보충 필요
- 일단 샤드 키로 분산을 한다는 것은 확실. 그럼 샤드키로 청크를 특정할 수 있어야 하는 듯.
    - MongoDB partitions sharded data into chunks. Each chunk has an inclusive lower and exclusive upper range based on the shard key.
- may have null value (after 4.3)
- <a href="https://docs.mongodb.com/manual/core/sharding-shard-a-collection/#std-label-sharding-shard-key-creation" target="_blank">sharding a collection</a>
- 샤드 키 변경
    - Starting in 5.0, you can __reshard a collection__ by changing a collection's shard key.
    - Starting in 4.4, you can __refine a shard key__ by adding a suffix field or fields to the existing shard key.
    - In 4.2 and earlier, the choice of __shard key cannot be changed__ after sharding.
- To shard a populated collection, the collection must have an index that starts with the shard key
- <a href="https://docs.mongodb.com/manual/sharding/#std-label-sharding-strategy" target="_blank">sharding strategy</a>
- <a href="https://docs.mongodb.com/manual/core/sharding-balancer-administration/" target="_blank">밸런서</a> - 샤드 간 청크를 분배
- For queries that include the shard key or the prefix of a compound shard key, mongos can target the query at a specific shard or set of shards. These targeted operations are generally more efficient than broadcasting to every shard in the cluster.
- you can reshard your sharded collection https://docs.mongodb.com/manual/core/sharding-reshard-a-collection/#std-label-sharding-resharding
- sharded cluster에 대한 접근은 무조건 mongos를 통해야 함
- hashed sharding / ranged sharding
- zone - skipped for now

### mongos
<a href="https://docs.mongodb.com/manual/core/sharded-cluster-query-router/#mongos" target="_blank">mongos</a>
- route queries / write operations to shards in a sharded cluster
    1. APP에게서 쿼리를 받음
    2. 쿼리를 받아야 하는 샤드를 결정 (config 서버로부터 정보를 받는 듣)
    3. 타겟 샤드에 cursor 생성 (!)
    4. merge (the data from each shard) and return
- sort등의 경우, 각 샤드의 결과를 정렬해 반환하는 역할도 함
- pipeline이 몽고스에서 실행되지 못하는 경우도 있음
- mongos performs a __broadcast operation__ for queries that do not include the shard key, routing queries to all shards in the cluster. Some queries that do include the shard key may still result in a broadcast operation depending on the distribution of data in the cluster and the selectivity of the query.


<a href="https://docs.mongodb.com/manual/core/sharded-cluster-query-router/#how-mongos-handles-query-modifiers" target="_blank">How mongos Handles `Query Modifiers`</a>
- sort - 머지함 (라운드 로빈 - 뭐 토너먼트 메소드 같은 거인듯)
- limits - 샤드에게 이걸 고려한 limit이 전달됨. 아예 쓸모없는 건 아닌듯
- skips - 쌩 skips는 몽고스에서 처리 (샤드와 주고받는 데이터는 주나 마나 동일 ㄷㄷ). limit과 같이 주어지면 효과가 있는 듯
- For sharded clusters, mongos applies the read preference when reading from the shards. The member selected is governed by both the read preference and replication.localPingThresholdMs settings, and is re-evaluated for each operation.

#### Targeted Operations vs. Broadcast Operations
Generally, the fastest queries in a sharded environment are those that mongos route to a single shard, using the shard key and the cluster meta data from the config server. These targeted operations use the shard key value to locate the shard or subset of shards that satisfy the query document.

For queries that don't include the shard key, mongos must query all shards, wait for their responses and then return the result to the application. These "scatter/gather" queries can be long running operations.


#### Index Use
If the query does not include the shard key, the mongos must send the query to all shards as a "scatter/gather" operation. Each shard will, in turn, use either the shard key index or another more efficient index to fulfill the query.

If the query includes multiple sub-expressions that reference the fields indexed by the shard key and the secondary index, the mongos can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently.


### config servers
<a href="https://docs.mongodb.com/manual/core/sharded-cluster-config-servers/#std-label-sharded-cluster-config-server" target="_blank">config servers</a>\
- has  metadata - includes the list of chunks on every shard and the ranges that define the chunks.



### data partitioning with chunks
<a href="https://docs.mongodb.com/manual/core/sharding-data-partitioning/" target="_blank">https://docs.mongodb.com/manual/core/sharding-data-partitioning/</a>


### balancer
<a href="https://docs.mongodb.com/manual/core/sharding-balancer-administration/#std-label-sharding-internals-balancing" target="_blank">https://docs.mongodb.com/manual/core/sharding-balancer-administration/#std-label-sharding-internals-balancing</a>





### 몽고 교육

#### Storage and Retrieval
- 커서 - 바로 데이터를 가져오지 않고, batch로 알아서 끊어서 가져옴
- find.skip - 매우 비효율적 (서버에 코스트가 있으며 대량 skip은 별로 권장 안하는 듯)
- to specify a field in a nested doc we use dot notation
    - `db.coll.findOne({"address.city": "New York"})` 처럼 사용가능
    - `findOne({address: {city: "New York"}})` 이건 추가적인 필드가 더 없는 경우 (문서구조가 정확히 일치)만 검색가능

#### 질답
```
쿼리의 인덱스 사용관련 궁금한 점이 있습니다.
저희가 API에서 보통 아래와 같은 식으로 쿼리를 하는데요.

{"pk":{"$in":["1", "2", "3", "4", ..., "50"]}, "category": {"$eq": "movie"}}

이 쿼리의 경우 pk로 탐색할 문서의 범위가 정해지기 때문에,  category에 인덱스가 걸려 있어도 큰 의미가 없을 것 같은데요.
반드시 category에 인덱스를 만들 필요가 있을까요 ? 오히려 category 인덱스를 유지하는 비용이 더 클 수 도 있다는 생각이 들어서요.

안녕하세요 

데이터 분포에 따라 다를 수 있습니다.

만약 pk 조건의 in 절에 10만개가 들어가고 category 필드에 "movie" 라는 값을 가진 도큐먼트가 10개만 있다면 category 매칭이 더 효율적일 것입니다.

데이터 분포는 저희가 알지 못하기 때문에 개발팀에서 판단해 주시는게 좋겠습니다.

또한, 샤드클러스터에서 데이터 조회 시 어떤 샤드에 있는지 판단한 뒤에 그 샤드에서 다시 데이터를 조회하게 되는데 

어느 샤드에 있는지 판단은 샤드키를 가지고 진행하고 샤드 내 데이터 조회는 다시 조건을 보고 적절한 인덱스를 선택하게 됩니다. 예를 들어 샤드키가 category 라면 샤드키를 삭제하면 안 되겠죠. (놀랍게도 샤딩 후에 샤드키를 삭제할 수가 있습니다. 에러가 발생하지 않아요. 물론 이후 여러가지 문제가 발생할 수 있습니다)


샤드키로 사용하지 않고 + category 의 데이터 분포가 큰 효율이 없다면 일반적으로 category 보다는 pk 로 엑세스 하는게 효율적일 것입니다. 

판단하기 어려운 데이터/쿼리가 있다면 알려주세요. DB 에서 플랜이 어떻게 동작하는지 확인해 보겠습니다.

답변해주셔서 고맙습니다. 
저희가 개발하는 추천플랫폼에서 콘텐츠 데이터 콜렉션을 생성할때 인덱스를 어떤 방식으로 생성할지를 고민하던 중에 문의드렸습니다.

말씀해주신 내용을 정리하면, API의 쿼리 형태가 위와 같은 경우
1. 필터링으로 사용할 필드에 대해서 반드시 색인이 필요하다.
2. pk로 한번 후보가 추려지기 때문에 색인이 필요하지 않다.
3. 쿼리되는 pk와 category의 분포에 의해 결정되기 때문에, 색인이 필요할 수도 그렇지 않을 수도 있다.

요기서 3번으로 답변해주셨다고 생각하겠습니다. (상대적으로 pk가 충분히 작으면 필드 색인이 불필요하고, category가 충분히 작으면 색인하는게 좋다.)

아 그리고 소트가 있는 경우 인덱스가 크게 달라질 수 있습니다. 소트가 있다면 꼭 알려주세요!
```

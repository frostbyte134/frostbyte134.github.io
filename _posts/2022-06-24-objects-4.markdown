---
layout: post
title:  "Objects - 코드로 이해하는 객체지향 설계 Chap13, 14, 15"
date:   2022-07-01 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---


### Chap 13 서브클래싱, 서브타이핑 (타입계층)

상속의 용도
1. first and foremost - 타입 계층 구현  
  부모 = 자식의 일반화, 자식 = 부모의 추상화
2. 코드 재사용 - 결합도가 높은 코드가 되어 남용하면 좋지않음

결론 - 다형적인 객체 (동일한 메시지에 다르게 동작할 수 있는)를 구현하기 위해서는 __객체의 행동을 기반으로__ 타입 계층을 구성해야 함

`객체기반 프로그래밍` - 객체 (행동 + 데이터)는 지원하지만 상속 등에 의한 위임은 지원 X
`프로토타입 기반 언어` - 클래스가 없이 객체만 있음

#### 타입이란

일반적인 타입 = 사람이 인지하는 사물의 종류
- `심볼` symbol: 타입의 이름. e.g) 프로그래밍 언어
- `내연` intention: 타입의 정의. 타입에 속하는 `인스턴스`들의 공통 속성/행동. e.g) 컴퓨터에게 명령을 내리는 언어
- `외연` extention: 타입에 속하는 객체들의 집합. e.g.) 파이썬, Rust, go, C++, ..


프로그래밍 언어 관점의 타입 = __비트집합에 의미와 제약을 부여하기 위해 사용됨__
1. 타입에 수행될 수 있는 operation의 목록을 정의
2. 타입에 수행되는 오퍼레이션에 대해, 컨텍스트를 제공  
  ex) a + b -> a,b가 int일시와 a=str, b=int일시 컨텍스트가 다름 -> 이 컨텍스트를 타입이 제공



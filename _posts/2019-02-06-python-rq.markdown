---
layout: post
title:  "Python - RQ (redis + queue)"
date:   2019-02-05 10:59:00
categories: python
use_math: true
tags: multiprocessing python redis rq
---

Reference: The Hacker's Guide to Scaling Python coroutine

### heavy tasks
* must be in different file
* must be a picklable function

```python
def compute(n):
        return sum([random.randint(1, 100) for _ in range(10000000)])

def writeFile(n):
    end = time.time()
    to = 1000000
    pool = multiprocessing.Pool(processes=8)
    rlt = pool.map(compute, range(8))
    print(type(rlt))
    print("rlt = ", rlt)
    print('time = {}'.format(time.time() - end))
    with open("test {}.txt".format(n), "w") as f:
        f.write("test {}\n".format(sum(rlt)))
        f.write(str(time.time() - end))
```

### redis server config
1. run redis server by
> redis-server
2. run worker by
> rq worker test

### inqueue
```python
import time
from rq import Queue
from redis import Redis
import randsum

q = Queue(connection=Redis(host='localhost', port=6379), name="test")


job = q.enqueue(randsum.writeFile, [1])
job = q.enqueue(randsum.writeFile, [2])
job = q.enqueue(randsum.writeFile, [3])
job = q.enqueue(randsum.writeFile, [4])
job = q.enqueue(randsum.writeFile, [5])


while job.result is None:
    print("empty!")
    time.sleep(1)

print(job.result)
```

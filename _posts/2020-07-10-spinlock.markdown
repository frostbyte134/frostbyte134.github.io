---
layout: post
title:  "Spinlock (Linux, ARM)"
date:   2020-07-10 09:00:05 +0800
categories: coding
use_math: true
tags: coding C
---

- 디버깅을 통해 배우는 리눅스 커널의 구조와 원리 (김동현 저)
- 비글본 커널 : `kernel_version=4.14.185-bone37`
- 아토믹 어셈블리 연산 - <a href="http://jake.dothome.co.kr/atomic/" target="_blank">http://jake.dothome.co.kr/atomic/</a>


### 사용법
```c
static DEFINE_SPINLOCK(static_spinlock);

void kernel_function()
{
    spin_lock(&static_spinlock);
    // critical section

    spin_unlock(&static_spinlock);
}
```


### 스핀락 자료구조
1. `raw_spinlock` : KERNEL/include/linux/spinlock_types.h   
    ```c++    
    typedef struct raw_spinlock {
        arch_spinlock_t raw_lock;
    #ifdef CONFIG_GENERIC_LOCKBREAK
        unsigned int break_lock;
    #endif
    #ifdef CONFIG_DEBUG_SPINLOCK
        unsigned int magic, owner_cpu;
        void *owner;
    #endif
    #ifdef CONFIG_DEBUG_LOCK_ALLOC
        struct lockdep_map dep_map;
    #endif
    } raw_spinlock_t;
    ```   
    `arch_spinlock_t` 만 일단 중요함. 아키텍처 스페시픽한 구현임  
2. `arch_spinlock_t` : KERNEL/include/linux/spinlock_types.h    
    ```c++
    #define TICKET_SHIFT	16

    typedef struct {
        union {
            u32 slock;
            struct __raw_tickets {
    #ifdef __ARMEB__
                u16 next;
                u16 owner;
    #else
                u16 owner;
                u16 next;
    #endif
            } tickets;
        };
    } arch_spinlock_t;
    ```


### spin_lock()


1. 용어 정의  
    - `스핀락 인스턴스` : 특정 메모리 공간에 있는 스핀락 자료구조. 커널의 전역변수 비슷
    - `스핀락 지역변수` : 각 프로세스의 스택에 있는, 스핀락 인스턴스의 복사본 (?)
2. 스핀락 동작  
    `owner`와 `next` 만 사용함  
    - `스핀락 지역변수.next` == `스핀락 인스턴스.owner` : 입장 티켓을 얻음
    - `스핀락 지역변수.next` > `스핀락 인스턴스.owner` : 누가 실행하고 `스핀락 인스턴스.owner`를 증가시킬 것임
    - `next`는 본 프로세스가 spinlock을 해제한 후 가지게 될 `owner`의 값이라고 생각하면 됨. 
3. 구현
    1. `spin_lock()` : KERNEL/include/linux/spinlock.h   

    ```c++    
    static __always_inline raw_spinlock_t *spinlock_check(spinlock_t *lock)
    {
        return &lock->rlock;
    }

    #define spin_lock_init(_lock)			
    do {						
        spinlock_check(_lock);			
        raw_spin_lock_init(&(_lock)->rlock);		
    } while (0)

    static __always_inline void spin_lock(spinlock_t *lock)
    {
        raw_spin_lock(&lock->rlock);
    }
    ```  

    2. `raw_spin_lock()` : KERNEL/include/linux/spinlock.h   

    ```c++
    #define raw_spin_lock(lock)	_raw_spin_lock(lock)
    ```

    3. `_raw_spin_lock` : KERNEL/kernel/locking/spinlock.c   
    
    ```c++
    #ifndef CONFIG_INLINE_SPIN_LOCK
    void __lockfunc _raw_spin_lock(raw_spinlock_t *lock)
    {
        __raw_spin_lock(lock);
    }
    EXPORT_SYMBOL(_raw_spin_lock);
    #endif
    ```

    4. `__raw_spin_lock()` : KERNEL/include/linux/spinlock_api_smp.h   
    
    ```c++    
    static inline void __raw_spin_lock(raw_spinlock_t *lock)
    {
        preempt_disable();
        spin_acquire(&lock->dep_map, 0, 0, _RET_IP_);
        LOCK_CONTENDED(lock, do_raw_spin_trylock, do_raw_spin_lock);
    }
    ```

    __중요한건__ 여기서 `preemp-disable()`이 이미 호출된다는 것 (내가 호출할 필요 없음). `do_raw_spin_lock`이 호출됨

    1. `do_raw_spin_lock()` : KERNEL/include/linux/spinlock.h. 넘모 극혐이고   
    
    ```c++
    static inline void do_raw_spin_lock(raw_spinlock_t *lock) __acquires(lock)
    {
        __acquire(lock);
        arch_spin_lock(&lock->raw_lock);
    }
    ```

    1. `arch_spin_lock()` : KERNEL/arch/arm/include/asm/spinlock.h  
    ARMv7, ARMv8까지는 ldrex/strex에 의한 exclusive store방식을 사용함. <a href="http://jake.dothome.co.kr/atomic/" target="_blank">ARMv8.1은 다른걸 쓴다 함</a>   
    ```c++               
    #define arch_spin_lock_flags(lock, flags) arch_spin_lock(lock)

    static inline void arch_spin_lock(arch_spinlock_t *lock)
    {
        unsigned long tmp;
        u32 newval;
        arch_spinlock_t lockval;

        prefetchw(&lock->slock);
        __asm__ __volatile__(
    "1:	ldrex	%0, [%3]\n"  ; //스핀락 인스턴스[%3]를 스택의 lockval로 로딩함
    "	add	%1, %0, %4\n"    ; //lockval의 next를 1 증가시켜서 newval에 저장. union이므로 slock에 연산하면 next/owner에 연산하는거나 마찬가지
    "	strex	%2, %1, [%3]\n" ; //newval을 스핀락 인스턴스[%3] 에 저장 시도
    "	teq	%2, #0\n"        ; //중간에 [%3]에 끼어든 게 있으면
    "	bne	1b"              ; //다시 스핀락 인스턴스 값을 로딩 고고
        : "=&r" (lockval), "=&r" (newval), "=&r" (tmp)    ; //입력 변수들
        : "r" (&lock->slock), "I" (1 << TICKET_SHIFT)     ; //출력 변수들
        : "cc");

        while (lockval.tickets.next != lockval.tickets.owner) {       // 로딩한 global.owner 와 위에서 증가시킨 local.ticket이 같으면 탈출
            wfe();
            lockval.tickets.owner = ACCESS_ONCE(lock->tickets.owner); // 글로벌 owner값을 로컬에 로딩함. 위에서 저장한 owner local값은 안쓰임.
        }

        smp_mb();
    }
    ```

4. 인라인 어셈블리
    1. `swp` 대신 `ldrex, strex` 세트로 atomicity 체크 (`str`, `ldr` 자체는 이미 atomic함. 그 사이가 문제)
       1. <a href="http://www.iamroot.org/xe/index.php?mid=Kernel&document_srl=21500" target="_blank">http://www.iamroot.org/xe/index.php?mid=Kernel&document_srl=21500</a>
       2. <a href="http://cloudrain21.com/why-replaced-ldrex-strex-swap" target="_blank">http://cloudrain21.com/why-replaced-ldrex-strex-swap</a>
       3. `strex rd, r0, [r1]` : r1이 가르키는 곳에 r0을 저장하고, 잘 저장됬으면 (`ldrex`와 세트이며, 이전 호출된 `ldrex` 사이에 다른 곳에서 `r1`에 접근하지 않았다면) `rd`에 0 저장
    2. `%0`, `%1` 등은 밑 `:` 부분에 선언된 순서임
    3. 두 프로세스가 동시에 함수에 진입했다고 가정.
       1. next = 0, owner = 0. 이 값은 보통 slock으로 두개를 동시에 접근 (속도)
       2. 두 프로세스 중, __next=0 / owner = 0 인 slock__ 을 `ldrex`할 수 있는 프로세스는 1개밖에 없음 (`ldrex` - `strex` 세트의 동작방식 덕분에)     
            결국 중요한 것은, `스핀락 인스턴스`의 값을 불러와 `스핀락 지역변수` 까지 저장하는 과정 (1:+2) 이 atomic해야 한다는 것이고, 이걸 `ldrex`와 `strex`세트로 해결
       3. 결국 두 프로세스는 어떻게든 순차적으로 티켓을 얻을 것임
       4. 티켓을 얻는다 = next값을 1 증가시켜서 global에 기록한다


### spin_unlock()
랩퍼 코드는 스킵함 ㅡㅡㅋ

```c++
static inline void arch_spin_unlock(arch_spinlock_t *lock)
{
	smp_mb();
	lock->tickets.owner++;
	dsb_sev();
}
```

__이미 critical section 이므로__, ticker의 owner만 증가시켜 주면 됨.


결국
1. `스핀락 인스턴스.next` : 지금까지 발급한 티켓
2. `스핀락 인스턴스.owner` : 지금 티켓을 받은 것
3. `스핀락 지역변수.next` : 지역변수에서 발급받은 티켓
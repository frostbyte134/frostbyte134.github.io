---
layout: post
title:  "구글 엔지니어는 이렇게 일한다"
date:   2023-03-29 08:00:05 +0800
categories: codinㄺ
use_math: true
tags: coding
---

보통 원서로 보는게 더 시간절약이긴 한데...팀에서 사주기도 했고 번역도 좋고 글자도 많고 시간도 없어서 (ㅡ,.ㅡ) 일단 한글로 봄 ㅎㅎ

### Chap 1

프로그래밍 = 개발 

SW ENG = (개발 + 유지보수 + 수정)
- 지속가능성 (`sustainability`)의 문제 포함
- 단명하는 시스템은 그저 프로그래밍 문제와 다를 게 없다
- "규모" (주로 scability) 문제도 포함
  - 리니어하게만 증가헤도 좋은 듯
- __만병통치약 (silver bullet)은 없다__
- 트레이드오프가 항상 존재
- 플밍보다 고려해야 하는 차원이 많음

기본 주제: 시간, 규모 확장, 트레이드오프

ㄺ
#### 1.1 시간과 변경

"경험상 대부분의 프로젝트는 5년 이내에 업그레이드를 했습니다" (5~10년 사이 어딘가)
- 요즘엔 더 빠른 게 아닌가...

`하이럼의 법칙`
- 명세에 없는 내용이여도 실행할 수 있으면 누군가는 (굳이 아득바득 찾아내서) 갖다 쓴다 (의존성을 만든다)
- 최선의 의도, 최고 엔지니어, 리뷰로도 공표한 명세나 best practice를 완벽하게 구현했다고 단정할 수 없음
- 가장 무해할 듯한 변경도 일부 사용자의 sw를 망가트릴 수 있다
- 밑바닥부터 짜는 것 보다 프레임워크 의존적인 경우, 그리고 프레임워크를 잘 갖다쓰는 경우 좀 줄어드는 듯
  - 그런가? 일단 작성하는 코드 자체가 줄어드니까 어느정도 맞긴 할 듯.ㅋㅋ

API 명세에 있지 않은, 언제든 변할 수 있는 기능을 사용하는 경ㅇ
- clever (프로그래밍 관점) / hacky (sw eng관점. 질책적인 관점)

효율성은 미묘한 문제
- 외부 모든 것 + 시간에 의존적

#### 1.2 규모확장과 효율성

변경 비용이 너무 높아지면 확장가능하지 않음

`비욘세 규칙` (인프라 관점)
- 인프라 변경으로 인한 문제여도, CI에서 못잡은 경우 인프라 잘못이 아님
- if you like it then you should prepared an integ test on it
- 내 멜론 장애 ㅋㅋ

"인프라는 자주 변경할수록 변경하기가 오히려 쉬워집니다"
- sw도 ㅋㅋ
- __더 자주 변경할수록 하부 구현에 의존x (운영체제마다 달라지는 소켓 에러코드 등), os/언어의 추상적인 부분에 의존 (DIP!)__

__전문가 - 요비__
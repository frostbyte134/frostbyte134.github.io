---
layout: post
title:  "블로그 이전하기"
date:   2022-12-09 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---


requirements
- 서킷브레이커
- AWS가 맞나? 공부용으로 ㄴ 맞을 거 같은데 비쌀듯
- MERN 인가 아니면 플러터를 봐야 하나. 근데 자바스크립트를 1도 몰라서, 이번기회에 리액트 봐두는 것도 좋을 듯
    - 그라파나 연동이 리액트가 쉽네. 플러터는 사용인구가 없어서 그런지...리액트 각이다
- 이미지를 편하게 올릴 수 있으면 좋겠음
- 릿코드 문제 정리할 때 처럼, 뭔가 테이블을 내가 실시간으로 편집할 수 있으면 좋겠음
- latex적용 - 이거 필요하려나 이제...ㅎㅎ
- 마크다운 적용이 되면 젤 좋은데...되나?
- 레이아웃은 어쩌지 ㅎㅎ 뭐 템플릿이 있겠지
- 로컬실행이 쉬워야 (지킬은 루비 의존적이고 넘 귀찮)
- DDD? TDD? zzzzz
- TODO 리스트가 있으면 좋겠음
    - 이걸 했는지 말았는지 체크하는 기능도?
- 생각해보면 노션에서 대부분 커버되는 거 같긴 함. 그래도 공부용이기도 하니까 만들어 봐야겠지..노션 임베드 하나쯤은 괜찮을지도?ㅋㅋ (todo list)

-------------------------------------

일단 생각
- 일단 장고를 써야 할 듯
- 요금폭탄 (?) 맞긴 싫으니까 써킷브레이커도 있어야 할 듯
- 주로 삽질 기록?
- Latex는 어쩌나. 뭔가 있긴 있겠지?
- cdn같은거 전혀 모르는데 이번기회에 좀 보면 좋겠네

> Do it! 장고+부트스트랩 파이썬 웹 개발의 정석 웹 기초부터 블로그 개발·배포·운영까지, 만들면서 배우는 웹 개발 A to Z

- <a href="https://developer.mozilla.org/en-US/docs/Web/CSS" target="_blank">Mozilla CSS</a>

### Chap 3 기초
- `<label>`태그 = for 속성을 radiobutton, input등의 id와 맞추면, 멀리 떨어져 있어도 label태그를 클릭한 게 radiobutton을 클릭한 게 됨
    <a href="http://tcpschool.com/html-tags/label" target="_blank">http://tcpschool.com/html-tags/label</a>
- `onkeyup`: input태그의 속성, 키보드로 값 변경시 적용되는 듯
- `<span>`: css 속성 먹이기 위해 주로 쓴다 함. `<div>`와의 차이점: 줄바꿈이 자동으로 안됨.
- js
    - `document.getElementById("valueB").innerHTML` 이걸로 id가 valueB인 태그 자체의 레퍼런스를 가져올 수 있음

### Chap 4 bootstrap
- 부트스트랩 쓰려면 뭔가 (?) 복붙해야 함
- 다중상속으로 속성을 구현하는듯 ex) `<nav class="navbar navbar-light container">`
- 그리드로 화면을 쉽게 비율단위로 분할가능
    - `col-sm-6`: 화면넓이가 small일때 (부트스트랩 홈피에 기준있음) 넓이 비율을 6만큼 먹음
- 마진 (외부로), 스페이싱 (내부로), 정렬 등
- pagination도 쉽게 추가되네...

### Chap 7
- 장고는 메인 프로젝트와 앱들로 구성됨
- 앱 = 도메인 모델? ORM등이 포함됨.
- 앱에 변경사항이 있을 시, makemigrations 및 migrate를 실행해야 프로젝트에서 앱의 변경을 인지하고 변화를 만듬 (ex = DB 테이블 생성)

### Chap 8
- 프로젝트의 urls.py - ingress-nginx처럼 라우팅 (모듈 내의 함수를 실행시키게 할 수 있음)
- views의 `render(request, 'blog/index.html', returning_dict)`: template폴더 안의 html파일을 렌더링 해주는 듯? (template/blog/index.html)
    - 템플릿 폴더를 새로만들면 장고가 인지를 못함. 재시작 필요
    - 딕셔너리에 넣어 모델 인스턴스를 리턴하면, html에서 바로 사용가능 ㄷㄷ 뭐로 하는거지
- 뷰의 자동 템플릿 html 명
    - listview: templates/proj_name/clsname_list.html
    - detailview: templates/proj_name/clsname_detail.html
    - createview: templates/proj_name/clsname_form.html

### Chap9 정적/미디어파일 관리
- 장고의 app_name/templates의 html파일은 정적파일이 아님 (동적으로 변하는 변수들이 있음) - 이 폴더에 css,js파일 넣으면 안됨 (그냥 html은 같은폴더에 bootstrap.jss 넣어도 됐음)
- 각 앱 폴더에 static폴더 만들고 넣음
- 뭔가..
    1. 모델에 이미지 필드 추가, migrate = 어드민에서 모델별로 이미지 추가 가능
    2. settings.py에서 어디 저장할지 설정
    3. urls.py에서 어떻게 여기로 올지 설정
    인듯

템플릿 관리
- base.html에서 block main_area로 main_area라는 구멍을 만들어 놓고, 각 페이지에선 base.html extend -> main_area 정의로 동일한 형태를 만듬.

### chap 13
- div로 comment area / post area를 나눴음 (id 배정). soup로 div에서 이 아이디를 갖는 애들 가져와서 테스트 (보통 이러는 건가?)
- 꺽% block main_area %꺽 ...  꺽% endblock %꺽 문법을 블록 정의 및 삽입에 동시에 (?!?!?)씀 - 왜 구분 안하지 ㄷㄷ 한쪽이 비어야 하는 건가
-  꺽% include 'blog/navbar.html' %꺽 으로 html 템플릿 자체를 그냥 삽입 가능


### Chap 14
- `author = models.ForeignKey(User, on_delete=models.CASCADE)` 로 ORM post model에 왜래키 추가 (쓰지 말랬는데 ㄷㄷ). 뒤에 on_delete옵션으로 fk 라이프사이클과 객체 라이프사이클을 연동가능
    - `models.CASCADE`: 사용자 삭제할 때 해당 포스트도 삭제
    - `models.SET_NULL`: 위의 반대. 이경우 해당 author attribute는 `null=True`세팅이 되어 있어야
- html 템플릿 파일에서 `{{ p.author | upper}}` 이러면 결국 뭐지? string의 .upper()함수를 호출한 건가...
- `null=True` - DB에 빈값을 가질 수 있나, `blank=True` - 어드민에서 빈값을 입력할 수 있나?
- django_extension/ipython을 poetry로 깔고, proj/settings.py의 INSTALLED_APPS에 추가하니, `poetry run python manage.py shell_plus`를 실행가능해졌음
- post모델에 foreign key로 카테고리를 등록 = `{category_object}.post_set.all()`로 해당 카테고리를 fk로 가진 모든 포스트를 불러올 수 있음
    ```
    self.cat1 = Category.objects.create(name='cat1', slug='cat1')
    self.cat1.post_set.all()
    ```
    - *_set 이건 뭔가 예약된 거인듯?
- `<div id="category_card">`를 만들고 테스트에서 이걸 활용 = 보통 이런식으로 하는 듯

html 템플렛에서 컨텍스트 사용 (?)
- view의 `get_context_data()`에서 반환하는 context에, html template에서 사용할 변수들을 만들 수 있음
- listview는 기본으로 `{model_name}_list`에 대상 모델의 `{model}.objects.all()`을 갖고 있음.

urlpattern
- `path('category/<str:slug>/', views.category_page)` - slug를 str type으로 view의 category_page함수에 넘겨 줘라~

FBV의 render함수
- `return render`에서, 어떤 html template을 사용할 건지 / 해당 template의 컨텍스트 dict 지정 가능

### Chap 14 many-to-many

어드민 페이지에서 관리할 수 있으려면, admin.py에 register로 등록해야 함

모델 생성 - `{model_name}.objects.create(attrs)`  
모델객체 a에 b 연결 (a의 attribute으로 b가 있어야 하는듯. fk나 manytomany로나)
- `a.{target_attr_name}.add(b)`

ManyToMany는 템플릿에서 이터레이터 사용가능 - `for tag in p.tags.iterator`


### Chap 15 포스트 작성 페이지 만들기
- 폼: 입력한 값을 서버로 전송해서 db에 저장할 수 있는 빈 칸? post/put으로 보낼 내용을 받을 수 있는 칸인듯
- view에서 `LoginRequiredMixin`을 추가하면 로그인 뷰가 됨 - 근데 얘가 상속순서상 더 앞으로 나와야 하네 ㄷㄷ 왜지?
    - form_valid함수에서, 이 뷰에 속한 폼에서 post가 왔을 시 로그인된 유저가 작성했는지 체크가능 - 아니면 redirect 시키기
- view에 `UserPassessTestMixin` 추가, test_func작성 = 유저 필터링 가능
    - form도 만들었으니 form_valid에도 해당 기능
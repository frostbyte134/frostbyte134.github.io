---
layout: post
title:  "Virtual file systems"
date:   2020-09-01 09:00:05 +0800
categories: coding
use_math: true
tags: os need_review coding
---

> 디버깅을 통해 배우는 리눅스 커널의 구조와 원리, 2권, 633p

why vfs?
- `자원`에 대한 정리(dentry), 권한설정 / 유효성 관리 / 자원접근시간 (inode), 생성/삭제 등을 abstraction
  - `자원` : HDD 파일, proc (모니터링 용), sysfs (장치들), cgroup 
- `virtual` = `abstraction`
- 보통 `vfs_xxx()` 형태의 함수를 호출 - 안에서 각 파일시스템별로 처리용 함수를 호출
- > 유저공간에서는 어떤 파일에 엑세스하든 `open(), write(), read()`와 같이 리눅스 표준 저수준함수만 쓰면 됨 (속성을 지정힗 필요 없음) - 생성할때 fd table에 타입정보가 반영이 되는듯 

### VFS의 객체 4개
- `superblock` 객체 : 파일시스템별 1개씩 있음 (마운트 등의 정보 관리)
  - 아이노드 생성 함수 보유
- `file` 객체 : 파일을 열고, 읽고, 쓰는 동작을 추상화
  - `spinlock_t f_lock;` 보유. 이걸로 동기화 되는듯
- `inode` 객체 : 특정 파일객체에 대한 메타데이터 보유. 파일과 같이 만들어지고 삭제됨
- `dentry` 객체 : 디렉토리 정보 보유

### cgroup2 파일시스템
- 이 페이지를 만든 이유
- <a href="https://tech.kakao.com/2020/06/29/cgroup-driver/" target="_blank">https://tech.kakao.com/2020/06/29/cgroup-driver/</a>
- <a href="https://conservative-vector.tistory.com/entry/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-cgroup-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C-%EC%88%98%EC%A0%95%EC%A4%91" target="_blank">여기부터 실습 시작해보면 될 듯</a>

### proc 파일시스템
- `cat kmsg` 로 동작가능 (ftrace / strace로 확인가능)
- 메모리에서 프로세스 모니터링용 파일시스템

### sysfs 파일시스템
- `cat cpuinfo_cur_freq` 로 호출가능
- 리눅스의 장치들


---
layout: post
title:  "Virtual file systems"
date:   2020-09-01 09:00:05 +0800
categories: coding
use_math: true
tags: os need_review coding
---

> 디버깅을 통해 배우는 리눅스 커널의 구조와 원리, 2권, 633p

why vfs?
- `자원`에 대한 정리(dentry), 권한설정 / 유효성 관리 / 자원접근시간 (inode), 생성/삭제 등을 abstraction
  - `자원` : HDD 파일, proc (모니터링 용), sysfs (장치들), cgroup 
- `virtual` = `abstraction`
- 보통 `vfs_xxx()` 형태의 함수를 호출 - 안에서 각 파일시스템별로 처리용 함수를 호출
- > 유저공간에서는 어떤 파일에 엑세스하든 `open(), write(), read()`와 같이 리눅스 표준 저수준함수만 쓰면 됨 (속성을 지정힗 필요 없음) - 생성할때 fd table에 타입정보가 반영이 되는듯 

### VFS의 객체 4개
- `superblock` 객체 : 파일시스템별 1개씩 있음 (마운트 등의 정보 관리)
  - 아이노드 생성 함수 보유
- `file` 객체 : 파일을 열고, 읽고, 쓰는 동작을 추상화
  - `spinlock_t f_lock;` 보유. 이걸로 동기화 되는듯
- `inode` 객체 : 특정 파일객체에 대한 메타데이터 보유. 파일과 같이 만들어지고 삭제됨
- `dentry` 객체 : 디렉토리 정보 보유

### cgroup2 파일시스템
- 이 페이지를 만든 이유
- <a href="https://man7.org/linux/man-pages/man7/cgroups.7.html" target="_blank">https://man7.org/linux/man-pages/man7/cgroups.7.html</a>
  - Terminology
      - A `cgroup` is a collection of processes that are bound to a set of limits or parameters defined via the cgroup filesystem.
      - A `subsystem` is a kernel component that modifies the behavior of the processes in a cgroup.  Various subsystems have been implemented, making it possible to do things such as limiting the amount of CPU time and memory available to a cgroup, accounting for the CPU time used by a cgroup, and freezing and resuming execution of the processes in a cgroup.  Subsystems are sometimes also known as resource controllers (or simply, controllers).
        - `cpu` subsystem : 스케쥴러 상에서 특정 하이어라키으 `사용량 제한`을 할 수 있음
      - The cgroups for a controller are arranged in a hierarchy.  This hierarchy is defined by creating, removing, and renaming subdirectories within the cgroup filesystem.  At each level of the hierarchy, attributes (e.g., limits) can be defined.  The limits,
       control, and accounting provided by cgroups generally have effect
       throughout the subhierarchy underneath the cgroup where the
       attributes are defined.  Thus, for example, the limits placed on a
       cgroup at a higher level in the hierarchy cannot be exceeded by
       descendant cgroups.
      - `cgroupv2` changes
        *  No thread-granularity control: all of the threads of a process
          must be in the same cgroup.
        *  No internal processes: a cgroup can't both have member processes
          and exercise controllers on child cgroups. (하이어라키 중간 cgroup 객체(?)들은 프로세스를 가지지 못함)
- <a href="https://tech.kakao.com/2020/06/29/cgroup-driver/" target="_blank">https://tech.kakao.com/2020/06/29/cgroup-driver/</a>
- <a href="https://conservative-vector.tistory.com/entry/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-cgroup-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C-%EC%88%98%EC%A0%95%EC%A4%91" target="_blank">여기부터 실습 시작해보면 될 듯</a>


### proc 파일시스템
- `cat kmsg` 로 동작가능 (ftrace / strace로 확인가능)
- 메모리에서 프로세스 모니터링용 파일시스템
- proc파일시스템에서 fd목록 체크 가능 ls -l /proc/6760/fd
- 
### sysfs 파일시스템
- `cat cpuinfo_cur_freq` 로 호출가능
- 시스템에 접속된 디바이스 정보를 참조하거나, 설정변경을 위한 파일시스템. /sys에 마운트

### devfs 파일시스템
- 물리 디바이스에 직접 엑세스하기 위한 파일시스템. /dev에 마운트

### tmpfs 파일시스템
- "프로를 위한 리눅스 시스템 구축과 운용의 기술" - 236p : 리눅스에선 "프로세스 간 공유 메모리" 영역으로 내부에서 tmpfs를 사용합니다

### var 파일시스템
- <a href="http://doc.kldp.org/Translations/html/SysAdminGuide-KLDP/x576.html" target="_blank">http://doc.kldp.org/Translations/html/SysAdminGuide-KLDP/x576.html</a>
- <a href="https://oracle.tistory.com/123" target="_blank">https://oracle.tistory.com/123</a>

### 잠금 파일?
- 어케 잠금을 관리하지. spinlock이랑 딴 건가
- <a href="https://man7.org/linux/man-pages/man2/open.2.html" target="_blank">linux man page (open)</a> - O_EXCL | O_CREAT 을 써서 파일을 만드는 것으로 잠금. O_CREAT과 같이 쓰지 않으면 undefined behavior (블록 장치 파일을 지정하면 없어도 된다고 함). NFS에서는 상위 버전부터 됨. symbolic link를 지정하면 fail. 파일이 존재할 시 EEXIST를 리턴하며 fail. 
- <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/open.html" target="_blank">https://pubs.opengroup.org/onlinepubs/009695399/functions/open.html</a> : If O_CREAT and O_EXCL are set, open() shall fail if the file exists. The check for the existence of the file and the creation of the file if it does not exist shall be atomic with respect to other threads executing open() naming the same filename in the same directory with O_EXCL and O_CREAT set. If O_EXCL and O_CREAT are set, and path names a symbolic link, open() shall fail and set errno to [EEXIST], regardless of the contents of the symbolic link. If O_EXCL is set and O_CREAT is not set, the result is undefined.
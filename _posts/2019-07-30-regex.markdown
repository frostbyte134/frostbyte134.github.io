---
layout: post
title:  "Regular Expression"
date:   2019-07-30 16:04:00 +0900
categories: coding
use_math: true
tags: coding regex
---

Reference : <a href="http://www.secmem.org/blog/2019/02/10/a-comprehensive-guide-to-regex/" target="_blank">http://www.secmem.org/blog/2019/02/10/a-comprehensive-guide-to-regex/</a>


### Definitions

1. \\(L\\): arbitrary language
2. \\(\Sigma\\): a set of characters of \\(L\\)
3. `string` : a sequence of finite length, composed of \\(\Sigma\\).  
   ex) \\(\Sigma = \\{a,b\\} \\), a string = \\(abaa\\) 
4. `regular expression`: __a set__ of strings, including
    * \\(\emptyset\\) : there is no string which corresponds to this regex
    * \\(\epsilon\\) : corresponds of strings with length 0

### Operations

For arbitrary two regex \\(R,S\\), 
1. `Kleene star`: \\(R^*\\). Any finite string which can be generated by concatening \\(R\\)
2. `concatenation`: \\(RS\\). R + S
3. `alternation`: \\(R\|S\\). R or S.

__The orders are in operator precedence__

EX) \\( b, aab, abab, abaabab \in (aa\|aba*)b \\)


__Things to note are__
1. regex is just a set of strings
2. There are set of strings which cannot be represneted by regex. ex) - set of all palindromes


### Grammar

Rule of thumbs (can be modified, but anyway)
1. first matched first served
2. greedy searching from the start
3. prefer longer matching (when 2 or more choices are available)


#### Cheat note (For specific examples, refer to the link)

`Characters set`
1. \\(.\\) : any character (except inside [])
2. [] : multiple or(s).  
   ex) \\(\text\{[ae] = a or e, [a-z] = a or ... or z\}\\) 
3. [^ : negation of [].  
   ex) \\(\text\{[^a-z] = except (a or ... or z)\}\\) 
4. \\(\text\{\w\}\\) : words (\\(\equiv [A-Za-z0-9\\_]\\)) 
5. \\(\text\{\d\}\\) : digits
6. \\(\text\{\s\}\\) : white space chars. \\(\equiv [\\t\\r\\n\\f]\\)
7. \\(\text\{\W\}, \text\{\D\}, \text\{\S\}\\) : negation of lowercases.


`Repetitions`
1. \\(\*\\) : 0 or more  
   \\(\text\{ \\ ab* \\ \} \quad\rightarrow\quad \textbf\{abbbbbbbbb\}\text\{c\} \\)  
   __the matching is found greedily, with the larger matching first.__  
2. \\(+\\) : 1 or more
3. \\(?\\) : 0 or 1
4. \\{\text\{m\}\\} : __exactly__ m times
5. \\(\text\{\{min,max\}\}\\) : minimum min times, maximum max times. can be omitted (0 or unlimited)

`Anchors`  
> anchores are zero-length token (\\(\epsilon\\)), and it corresponds to a position (rather than a character)

1. \\(\^\\) : first of the string
2. \\($\\) : end of the string  
   ex) \\(\\[a-z]\\ \quad\rightarrow\quad B\textbf\{eer\} \\)
3. \\(\text\{\b\}\\): boundary of word characterss \\(\text\{w\}\\). 
   \\[\text\{\\ \b is \b \\ \}\quad\rightarrow\quad \text\{This \} \textbf\{is \} \text\{ an example\}\quad \text\{missing island\}\\]


`Alternation`  
\\(\|\\) : has __lowest__ precedence
EX)
1. \\(\text\{ \\cat\|dog\\ \} \\) is not equivalent to ca[td]og, but cat or dog.
2. \\(\text\{ \\100+1+\|01\\ \} \quad\rightarrow\quad \textbf\{10011\}\text\{00011\}\\)  
   1. We have 100011 in the back which is also matched, but the first matched (10011) will be returned, even though it is smaller
   2. 01 (in the back of 10011) is also matched, but first matched will be returned

`Group`   
\\(()\\).  
\\(\text\{ \\ -?\\d+(\\.\\d+)?\\s[-+*]\\s-?\d+(\.\d+)?\\ \} \quad\rightarrow\quad \text\{3 = \}\textbf\{1.231 + 2.223.233\}\\), \\(\text\{1232-2.89\}\\)
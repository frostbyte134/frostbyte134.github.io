---
layout: post
title:  "OOP란 뭘까"
date:   2021-12-26 08:00:05 +0800
categories: coding
use_math: true
tags: coding python
---

이 책들을 읽어서 뭔가 알게 되면 좋겠네 ㅡㅡㅋ

### 객체지향의 사실과 오해

#### 01 협력하는 객체들의 공동체
객체지향의 목표 \\(\neq\\) 실세계를 모방. 오히려 새로운 세계를 창조하는 것 (...?)
- > 개발자는 실세계를 SW안으로 옮겨 담는 것이 아니라, 고객과 사용자를 만족시킬 수 있는 신세계를 창조하는 것
- 실세계에 대한 비유는 객체지향의 다양한 측면을 이해하고 학습하는 데에만 효과적

객체지향에서 가장 중요한 개념 3개: `역할, 책임, 협력`
- 협력: 요청/응답으로 구성
   - 요청은 연쇄적으로 (책임이 있는 객체들에게 sequential하게) 발생, 응답은 그 역순
- 특정한 역할은 특정한 책임을 암시 
   - ex) 선생님: 담당 학생 교육에 책임이 있음
   - __역할은 관련된 책임의 집합__
      - 역할은 대체가능함 (duck typing)
      - 단일객체가 여러 책임을 질 수도 있음 (이런 디자인이 좋은가는 둘째치고서라도)
   - 역할은 객체의 (일종의) 페르소나다 - 이것도 덕타이핑?
   - 역할은 __유연하고 재사용 가능한 협력 관계__ 를 구축하는 데 중요함 (이런 게 있나? 모듈단위로 재사용이 아니고 관계 자체를 재사용?)

객체지향에서의 `시스템`의 정의
- 시스템의 구성: 역할과 책임을 수행하는 객체
- 시스템의 기능: 객체 간 연쇄적인 요청/응답의 흐름
- > 객체지향 설계라는 art는 적절한 객체에게 적절한 책임을 할당하는 것에서 시작된다. 책임이 불분명한 객체는 앱의 미래 역시 불분명하게 만든다
   - 예술을 일부러 art로 바꿈. 뜻이 더 넓ㅂ으니까...

객체
- 객체지향 패러다임의 중심, 실제로 협력을 수행하는 주체
- 객체는 협력적이야 함
   - '아주 작은 기능조차 객체 혼자 감당하기엔 복잡하기 때문에, 일반적으로 객체는 다른 객체와의 협력을 통해 기능을 구현한다'
- 동시에 자율적이기도 해야 함 (...)
   - 모듈로서 세부적인 것들은 의존적이면 안된다는 뜻인듯...
- 흔히 객체를 __상태와 행동을 지닌 실체__ 로 정의
   - 행동에 필요한 상태를 스스로 갖고 있어여 함
   - 객체의 자율성은 내부와 외부를 명확하게 구분하는 것으로부터 나온다 ... 객체는 다른 객체가 무엇(what)을 하는지는 알 수 있지만 어떻게(how)는 알 수 없다 (알아야 하면 안됨)
      - 과거(전통적 개발): 데이터/프로세스를 구분
      - oop: 데이터(상태) / 프로세스(행동)을 묶어서 관리 - 자율성을 통해 유지보수 향상 기대 (양날의 검인듯)

메시지
- 객체지향에서는 오직 한 가지 의사소통만 존재: 메시지
- 협력: 메시지의 송신자 (`sender`) / 수신자 (`receiver`) 사이에서 일어남
- `method`: 객체가 수신된 메시지를 처리하는 방법
- > 외부의 요청이 무엇인지를 표현하는 메시지와 요청을 처리하기 위한 구체적인 방법인 메서드를 분리하는 것은 객체의 자율성을 높이는 핵심 메커니즘이다. 이것은 캡슐화 (`encapsulation`) 라는 개념과도 깊이 관련되어 있다

객체지향이란?
- 시스템 = 상호작용하는 자율적인 객체들의 공동체
   - 자율적인 객체: 상태와 행위를 지니며 스스로 자기자신을 책임짐
- 객체는 시스템의 행위를 구현하기 위해 다른 객체와 협력한다. 각 각체는 협력 내에서 정해진 역할을 수행하며, 역할은 관련된 책임의 집합이다



### Growing object-oriented software, guided by tests
- ㅁ
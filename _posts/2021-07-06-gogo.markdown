---
layout: post
title:  "나시고랭"
date:   2021-07-06 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---


### Getting Started
<a href="https://golang.org/doc/tutorial/getting-started" target="_blank">https://golang.org/doc/tutorial/getting-started</a>
- When your code imports packages contained in other modules, you manage those dependencies through your code's own module. That module is defined by a `go.mod` file that tracks the modules that provide those packages
  - `go.mod` enables dependency tracking for your code
- a `package` is a way to group functions, and it's made up of all the files in the same directory

#### Call code in an external package
- Packages are published in `modules` -- like rsc.io/quote -- where others can use them.
- You can use the <a href="pkg.go.dev" target="_blank">pkg.go.dev</a> site to find published modules
- `go mod tidy` 
  - go will add modules in the current package
  - `go.sum` file will be added for authenticating the module.


#### Tutorial: Create a Go module
<img src="https://golang.org/doc/tutorial/images/function-syntax.png">
- the `:=` operator is a shortcut for declaring and initializing a variable in one line
```
var message string
message = fmt.Sprintf("Hi, %v. Welcome!", name)
```
is equivalent to
```
message := fmt.Sprintf("Hi, %v. Welcome!", name)
```

- use the go mod edit command to edit the `example.com/hello` module to redirect `Go tools` from its module path (where the module isn't) to the local directory (where it is)
-  run the `go mod tidy` command to synchronize the module's dependencies
- __common error handling in Go:__ Return an error as a value so the caller can check for it
  - `func Hello(name string) (string, error)`


#### Return greetings for multiple people
<a href="https://golang.org/doc/tutorial/greetings-multiple-people" target="_blank">link</a>
- you'll handle a multiple-value input, then pair values in that input with a multiple-value output
- To do that, you'll need to pass a set of names to a function that can return a greeting for each of them.
- In Go, you initialize a map with the following syntax: `make(map[key-type]value-type)`
- array declaring+init = `names := []string{"Gladys", "Samantha", "Darrin"}`


#### Add a test
<a href="https://golang.org/doc/tutorial/add-a-test" target="_blank">https://golang.org/doc/tutorial/add-a-test</a>
- Ending a file's name with `_test.go` tells the go test command that this file contains test functions.
  - Test function names have the form `TestName`, where Name says something about the specific test
  - Also, test functions take a pointer to the testing package's testing.T type as a parameter (`t *testing.T`). You use this parameter's methods for reporting and logging from your test.
    - t parameter's `Fatalf` method can print a message to the console and end execution (test failure scenario)


#### Compile and install the application
- `go build` : compile binary
- `go list -f '{{.Target}}'` : tells where the binary is generated
- Add the Go install directory to your system's shell path -> can run executables anywhere
  - windows : `D:\codes\go_tutorial\hello`
  - unix : `export PATH=$PATH:/path/to/your/install/directory`
- GO로 만든 바이너리를 특정 폴더에 위치시키고 싶다면?
  - `go env -w GOBIN=/path/to/your/bin` 후 `go install`? 이건 뭐하는 거임


### Managing dependencies
<a href="https://golang.org/doc/modules/managing-dependencies" target="_blank">https://golang.org/doc/modules/managing-dependencies</a>


### A Tour of Go

<a href="https://tour.golang.org/welcome/1" target="_blank">https://tour.golang.org/welcome/1</a>
- 모든 Go 프로그램은 패키지로 구성되어있습니다.
- 프로그램은 main 패키지에서 실행을 시작합니다.


#### 포멧팅
- `go fmt` : 
- 들여쓰기를 위해 탭(tabs)을 사용하며, gofmt는 기본값으로 탭을 사용한다. 만약 꼭 써야하는 경우에만 스페이스(spaces)를 사용하라.
- Go는 __한 줄 길이에 제한이 없다.__ 길이가 길어지는것에 대해 걱정하지 마라. 만약 라인 길이가 너무 길게 느껴진다면, 별도의 탭을 가지고 들여쓰기를하여 감싸라
- 다른 언어와는 다르게 스페이스의 사용이 함축하는 바가 크다
  - `x<<8 + y<<16` ?

#### 주석
- Go언어는 C언어 스타일의 /** **/ 블럭주석과 C++스타일의 // 한줄(line) 주석을 제공한다
- 프로그램 및 웹서버이기도 한 godoc은 패키지의 내용에 대한 문서를 추출하도록 Go 소스 파일을 처리한다. 최상위 선언문 이전에 끼어드는 줄바꿈 없이 주석이 나타나면 그 선언문과 함께 추출되어 해당 항목의 설명으로 제공된다.
- 모든 패키지(package)는 패키지 구문 이전에 블럭주석형태의 패키지 주석이 있어야 한다
- 생성된 출력이 고정폭 폰트로 주어지지 않을 수도 있으므로, 스페이스나 정렬등에 의존하지 말라. 그런 것들은 gofmt과 마찬가지로 godoc이 처리한다
- Go언어의 선언구문은 그룹화가 가능하다. 하나의 문서주석은 관련된 상수 또는 변수의 그룹에 대해 설명할 수 있다
```
// Error codes returned by failures to parse an expression.
var (
    ErrInternal      = errors.New("regexp: internal error")
    ErrUnmatchedLpar = errors.New("regexp: unmatched '('")
    ErrUnmatchedRpar = errors.New("regexp: unmatched ')'")
    ...
)
```
- 그룹화는 항목 간의 관련성을 나타낼 수 있다. 예를 들어 아래 변수들의 그룹은 mutex에 의해 보호되고 있음을 보여준다.
```
var (
    countLock   sync.Mutex
    inputCount  uint32
    outputCount uint32
    errorCount  uint32
)
```

#### 명칭
- 관례적으로, 패키지명은 소문자, 한 단어로만 부여하며 언더바(_)나 대소문자 혼용에 대한 필요가 없어야한다
- 패키지명은 오직 임포트를 위한 이름이다. 이는 모든 소스코드에서 유일할 필요는 없으며, 드문 경우지만 임포트를 하는 패키지가 충돌할때엔 국지적으로 다른 이름을 선택할 수 있다.
- Go는 getters와 setters를 자체적으로 제공하지 않는다. 스스로 getters와 setters를 만들어 사용하면 되는데 이는 전혀 문제될게 없으며 이는 적절하고 일반적인 방법이다. 그러나 __getter의 이름에 Get을 넣는건 Go언어 답지도, 필수적이지도 않다.__ 만약 owner(첫 문자가 소문자이며 패키지 밖으로 노출되지 않는다.)라는 필드를 가지고 있다면 getter 메서드는 GetOwner가 아닌 Owner(첫 문자가 대문자이며, 패키지 밖으로 노출됨)라고 불러야한다. 패키지밖으로 노출하기 위해 대문자 이름을 사용하는 것은 메서드로부터 필드를 식별할 수 있는 훅(hook)을 제공한다. __만약 필요하다면, setter 함수는 SetOwner라고 불릴 것이다.__ 두 이름 모두 읽기 쉽다.
- Go에서의 네이밍 규칙은 여러 단어로된 이름을 명명할 때 __언더바(_) 대신 대소문자 혼합(MixedCaps나 mixedCaps)을__ 사용하는 것이다.


#### 제어구조
- 중괄호 의무 사용
- id문 조건부에 초기화 허용
```
if err := file.Chmod(0664); err != nil {
    log.Print(err)
    return err
}
```
- for문엔 init (do-while), post 전부 포함
```
for init; condition; post { }
```
- 이터레이터에 대해 range?
```
for key, value := range oldMap {
    newMap[key] = value
}
```
- 스위치문에 일반표현식 올 수 있음

#### 함수
- Go 언어가 가지고 있는 특징 중 하나는 함수와 메소드가 여러 값을 반환 할 수 있다는 것이다
- 반환값에도 미리 이름을 줄 수 있음. 좋은듯
```
func ReadFull(r Reader, buf []byte) (n int, err error) {
    for len(buf) > 0 && err == nil {
        var nr int
        nr, err = r.Read(buf)
        n += nr
        buf = buf[nr:]
    }
    return
}
```
- `defer` : 함수가 return 될때까지 처리가 연기되는 statement. 오히려 안좋은 거 아닌가? 왜캐 복잡하게...
  - `open`근처에 `close`가 위치하면 더 명확하...긴 하겠지?
```
func Contents(filename string) (string, error) {
    f, err := os.Open(filename)
    if err != nil {
        return "", err
    }
    defer f.Close()  // f.Close will run when we're finished.

    var result []byte
    buf := make([]byte, 100)
    for {
        n, err := f.Read(buf[0:])
        result = append(result, buf[0:n]...) // append is discussed later.
        if err != nil {
            if err == io.EOF {
                break
            }
            return "", err  // f will be closed if we return here.
        }
    }
    return string(result), nil // f will be closed if we return here.
}
```
- 지연된 함수는 LIFO 순서에 의해 실행되므로, 아래 코드에서는 함수가 반환되면 4 3 2 1 0 을 출력할 것이다
```
for i := 0; i < 5; i++ {
    defer fmt.Printf("%d ", i)
}
```


#### 데이터
- `new` : 제로 초기화. 전이적임 (내부 데이터에 대해)
- 합성 리터럴(`composite literal`)
```
func NewFile(fd int, name string) *File {
    if fd < 0 {
        return nil
    }
    f := File{fd, name, nil, 0}
    return &f
}
```
  - 로컬 변수의 주소를 반환해도 아무 문제가 없음 (ㄷㄷ)
  - 합성 리터럴은 한번 실행될 때 마다 새 인스턴스가 만들어짐. 스택에 저장되는게 아닌 듯. 그래서 아래와 같은 표현도 가능
    - `return &File{fd, name, nil, 0}`
  - 합성 리터럴의 필드들은 순서대로 배열되고 반드시 입력해야 한다. 하지만, 요소들에 레이블을 붙여 필드:값 식으로 명시적으로 짝을 만들면, 초기화는 순서에 관계 없이 나타날 수 있다. 입력되지 않은 요소들은 각자에 맞는 제로값을 갖는다
  - 또 합성 리터럴은 arrays, slices, 와 maps를 생성하는데 사용될 수도 있는데, 필드 레이블로 인덱스와 맵의 키를 적절히 사용해야 한다.
    - a := [...]string   {Enone: "no error", Eio: "Eio", Einval: "invalid argument"}
- `make`
  -  slices, maps, 그리고 channels에만 사용
  - (*T가 아닌) 타입 T의 (제로값이 아닌) 초기화된 값을 반환한다
  - 이러한 차이가 있는 이유는 __이 세 타입이 내부적으로 반드시 사용 전 초기화 되어야 하는 데이터 구조를 가리키고 있기 때문이다.__ 예를 들어, slice는 세가지 항목의 기술항으로 (array내) 데이터를 가리키는 포인터, 크기, 그리고 용량를 가지며, 이 항목들이 초기화되기 전 까지, slice는 nil이다. slices, maps, 그리고 channels에 대해, make는 내부 데이터 구조를 초기화하고 사용될 값을 준비한다.


#### 배열
- 배열은 값이다. 한 배열을 다른 배열에 할당(assign)할 때 모든 요소가 복사된다.
- 특히, 함수에 배열을 패스할 때, 함수는 포인터가 아닌 복사된 배열을 받는다.
- 배열의 크기는 타입의 한 부분이다. 타입 [10]int과 [20]int는 서로 다르다.
- 배열에 대한 포인터를 보내야 시작주소만 보낼 수 있음. 그러나 go답지는 않음. __slice를 사용해라__
- var로 - 배열, make으로 - slice?


### map
- 없는 키에 대해서는 0이 나옴. 진짜 없는 것과 0값을 구분하기 위해서는 go니까 `seconds, ok = timeZone[tz]`를 활용
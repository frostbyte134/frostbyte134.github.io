---
layout: post
title:  "Designing Data Centric Application"
date:   2021-08-25 08:00:05 +0800
categories: coding
use_math: true
tags: coding
---

어느 세월에 보지...근데 내용은 좋네 ㄷㄷ

### Chap 1

`Data-intensive` app
- RAW cpu power is rarely a limiting factor
- db, cache, search index, stream/batch processing


#### 3 concerns in software systems
1. `Reliability`
  - Should continue to work `correctly` (performing the correct function at the desired lvl of performance) in the face of `adversity` 
 (hw/sw/human faults)
  - `fault`: system component fails / `failure`: system as a whole fails
  - must be fault-tolerant / resilient
  - HW failure: often add redundancy to individual HW
  - 휴먼에러: 잘못쓰기 어렵게 만들기, easy rollback, monitoring
2.  `Scalability`
  - reasonable way to dealing with the system growth
  - describe the __load__ of system (ex - TPS, hit ratio of cache, DAU, ...)

#### 트위터 타임라인 구성하기
- 트윗은 글로벌하게 그냥 저장
- 트윗이 올라왔을 때 타임라인 구성하기
   1. 온디멘드 타임라인 구성 
   2. 유저 A의 트윗이 올라오면, 해당 유저 팔로워의 미리 만들어 놓은 타임라인 증분 업데이트
- 처음 1번에서 2번으로 전환했다 함 (read operation이 훨 많아서)
  - 이 경우, 핵심 load parameter는 fan out 숫자임
- 최종적으로, 2번이나 핵심 유저가 트윗 올리면 바로 증분업데이트 안하고 (팬아웃이 너무 많아 로드 파라미터를 너무 크게 올림), 타임라인 올릴 때 유명 유저 리스트만 훑는다고 함

Latency and response time
- `latency`: dutation that a request is waiting to be handled  
- `response time`: 클라이언트 기준 응답시간 (서비스 타임)

#### `Maintainability`
  - productivity (even with many ppl working with)
  - fixing bugs, keeping system opetational, investigating failures, ...

3 design principle for SW systems (for high maintainability)
- Operability (easy to operate)
  - Good operatibility means making routine tasks easy
- simplicity (easy to understand)
- evolvability (easy to make change)
  - agile, tdd, short cycles, refactor

#### Describing Performance
- SLA, P50, P95, P99 (tail lavencies), avg
- five-nine
- Amazon has observed 100ms increase in response time reduces sales by 1%
- 1sec slowdown reduces a customer satisfaction by 16%
- OTOH, optimizing extreme tail performance is too expensive (over engineering)
- calculating average - window selection and alg is important (`forward decay`, `t-digest`, `HdrHistogram`)


#### Approahes for coping with Load
- scale up (HW up) / scale out (병렬처리)
- `elastic` system: can automatically add computing resources when they detect a load increase

> While distributing stateless services across multiple machines is fairly straightforward, taking stateful data systems from a single node to a distributed setup can introduce a lot of additional complexity. For this reqson, common wisdom until recently was to kkep your database on a single node (scale up) until scaling cost or HA requirements forced you to make it distributed



# ACID
- RDB: ACID 지원
- noSQL: 어떤지?
- redis: 싱글쓰레드인데 파이프라이닝이 있음

# Dirty RW
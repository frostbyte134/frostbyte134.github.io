---
layout: post
title:  "서마터카 소프트웨어 엔지니어링"
date:   2020-05-20 09:00:00 +0800
categories: coding
use_math: true
tags: coding C
---

빨리 시험 봤으면 ㅡㅡ 뭐하는건지...

다이어그램 문제
- 문서2-문제20, 21, 22

### 어딘지 모르겠는 것
`HSI`
- HW - SW interface
- SW개발 담당자가 작성해야 하는 것
  - 함수 수행 주기
- HW담당자 역할
  - MCU pin의 입출력 범위 / 정확도 / test point / low일시 타깃모듈 상태
- 출제 - 문서2 문제15

`FMEA`
- 위험이야 결함이야
- 출제 - 문서2 문제21
- __안전 메커니즘__
    - `입력 이중화` : 값이 입력범위 안에 있을 시, fault 체크 가능
    - `프로그램 흐름 모니터링` : 무한지연시점에는 대응 안됨. 이땐 watchdog 필요
    - 

#### 프로젝트 생명주기 (lifecycle) 모델
- `애자일 모델` : 빈번한 피드백. 체계적 X
- `나선형 모델` : 프로젝트 시작 전, 위험부분 식별 및 해결 시도. 위험요소가 클때 좋음
- `폭포수 모델` : 요구사항 변경 / 피드백 반영 어려움
- `증가 모델` : 체계적. 개발규모가 크나, 도중 피드백 / 일부 요구사항은 개발하며 상세화가 필요할 때
- `진화 모델` : 요구사항이 모호할 시, iteration

출제 : 문서2 - 문제12

### 1.1 요구사항 도출 및 분석

#### 1.1.1 소프트웨어 요구사항을 고객 또는 시스템 요구사항으로부터 도출하기 위한 기법을 설명할 수 있다.
- `브레인스토밍`: 정해진 요구사항이 없을 시. 자유롭게
- `설문`: 대면이 없으므로 자유로움. 설문지 필요. 개인별 요구사항 도출 기법 (설문, 인터뷰) 여서 아이디어 도출/정제에 비교적 덜 효과적
- `사용자 관찰` : 사용자를 직접 관찰. 사용자와의 거리 줄일 수 있음
- `프로토타이핑` : 시제품 (mockup), 종이에 그려서 진행. 아이디어에 대한 피드백 획득가능, 구체화에 좋음.
- `인터뷰` : 직접대화. 고객참여가 필요. 새 아이디어 만드는 데는 좋지 않음

출제 : 문서2 - 문제1


#### 1.1.2 예외 기능을 도출하기 위한 오류 유형을 설명할 수 있다
- `No function` : "조건이 만족되면 해야 하는데 하지 않음"
- `Degraded or Exceed` : __시간__ 과 관련된건 절대 안됨 (ex - 100ms이내 알람 줘야 되는데 안줌 = too early too late. wtf)
- `Unintended work` : 
- `No stop, Still work` : 변경시 관둬야 하는데 관두지 않는 경우
- `Unintended stop` : 
- `Too early or Too late` : 
출제 : 문서2 - 문제16

### 1.2 요구사항 명세 및 검증

#### 1.2.1 좋은 SW요구사항 명세서를 작성하기 위한 특징을 설명할 수 있다
- 추출(from 시스템) - 명세 (정의 - 분석 - 우선순위화) - 검증(인스펙션?)의 순서
  

#### 1.2.3 소프트웨어 요구사항의 품질 속성 (비기능 요구사항)을 설명할 수 있다.
- `추적성` : 요구사항의 도출 근거를 찾을 수 있는가
- `일관성` : 
- `필요성` : 
- `검증가능성`: 명확한 검증 기준이 제시되었나
- `명확성` : 요구사항에 사용된 문장이 모호하지 않나

출제 : 문서2 - 문제3

#### 1.2.4 소프트웨어 요구사항의 검증 기준 (verification criteria)을 작성할 수 있다.
- 검증 기준은 __요구사항이 합의된 제약 내에서 검증될 수 있음을 입증할 수 있는 내용으로 작성__돼야. 뭐래. 국어부터 좀...

출제 : 문서2 - 문제17 (이문제 "모든 입력에 대해 25ms에 반응해야 한다" 에 대해 i1, i2의 입력시간과 o1의 출력시간을 디버그를 이용하여 측정한다 를 틀렸다고 하는데, 이전 문제에서는 맞았던 거 같은데.)

### 소프트웨어 안전 요구사항 명세
#### 소프트웨어 안전 요구사항에 해당하는 기능을 구분할 수 있다
SW
- 센서 오류에 대한 검출 및 대응 시간 목표값
- 모니터링 제어기와의 질의-응답기능 요구사항
- 레지스터 자가진단 수행을 위한 테스트패턴에 대한 요구사항

HW
- 릴레이의 상시열림 기능
- watchdog의 타이밍 및 감지능력에 대한 요구사항

출제 : 문서2-문제19

#### Usecase


* `대안 흐름` : 사용자 입력에 의해 다른 flow가 실행되는 경우 (ex - 셔플 모드를 누른 뒤, 나중에 "다음 곡" 선택을 했을 시) 
* `예외 흐름` : 오류에 대한 대응 (ex - 재생이 불가능한 파일이 선택된 경우). 기본 / 대안 외의 모든 흐름

출제
* 문서2 - 문제1



### 소프트웨어 아키텍처 설계 (스케쥴러 / 메모리 / 인터페이스 / UML notation / modeling)

#### 소프트웨어 아키텍처 관점
- `프로세스 관점` : 시스템에 어떤 proc/thread가 있는지, 동기화 / 소유 등 표현
- `논리 관점` : 소프트웨어를 구성하기 위한 모듈들의 구조를 표현. 책 어딘가에 나왔는데.
- `배포 관점` : 시스템을 구성하는 컴퓨터들이 어떻게 배치되고 연결돼있는지 표현. 문제 어딘가에 나왔는데
- `유스케이스 관점` : 최종 사용자가 바라보는 시스템
- `구현 관점` :  최종 소스코드들간의 관계, 분석/설계 모델들이 그 소스코드에 어떻게 연결됐는지 (?)

출제
- 문서2 - 문제6

#### 2.1.2 소프트웨어 아키텍처를 설계하기 위한 설계 전술을 설명할 수 있다
- `예외 처리` : 예상하지 못한 누략, 정지 타이밍 발생 시 이를 알리고 대응
- `실행 경로 제한` : 성능을 위한? 뭐지 이건
- `통신 경로 제한` : 모듈간 데이터 공유 경로 제한. 이걸 통신이라고 해버리네..유지보수성 좋아짐
- `샘플링 빈도 조정` : 다 처리하면 느려지니 성능을 위한 것
- `실행시간 제한` : 이벤트 응답 타임아웃 도입. 성능인듯?
- `사용자 인터페이스 분리` : 사용 편의성을 위한?
- `중계자 사용`: 모듈간 결합관계를 약하게

"아키텍처 설계 지침" 이란 문서가 있긴 한데..별로 보고싶진 않네 ㅡㅡ

출제
- 문서2 - 문제7

### 소프트웨어 분석 설계 기법 활용 (구조적, 객체지향 등)

#### 2.2.2 객체지향 분석/설계 기법 및 표기법 (UML)을 적용하여 SW아키텍처 설계 및 상세 설계를 수행할 수 있다


- `SW모듈 상세 설계 결과`
  - + : public
  - - : private
  - 꽉찬 네모 : aggregation
  - 빈 네모 : inheritance?
  - 화살표의 숫자: 해당 박스의 객체 숫자
  - 출제 : 문서2 - 문제8
- `시퀸스 다이어그램` : 호출한 쪽에서 호출당하는 쪽으로 화살표
    - 출제 : 문서2 - 문제4

### 3.1 형상관리 적용
#### 3.1.1 형상관리의 개념과 활동을 설명할 수 있다

제품 baseline 수립
- 요구사항에 맞게 동작하는지 검증할 필요는 없음
- 테스트에서 발생한 결함이 해결되었는지 확인 필요
- 베이스라인에 포함되야 하는 요구/변경사항이 반영되었는지 확인
- 기술적인 검토 / 테스트까지 갈 필요는 없다고 함. (베이스라인에 포함되는 개별 산출물들이 정확하고 빠짐없이 작성되었는지 검토 = X)
- 출제 : 문서2 - 문제9



### 3.2 테스트 기법 적용 (black/white/fault-injection)


#### __Fault injection test__

__MCU 정상동작 진단 테스트__
- 타이머가 빠르게 동작하는 경우
- 함수 호출이 잘못된 순서로 호출되는 경우
- 인터럽트 처리 루틴이 무한루프에 빠지는 경우

__센서 정상동작 진단 테스트__
- 샘플링 설정이 잘못된 경우 (ss)

__메모리 테스트__
- 잘못된 포인터로 스택영역의 주소를 접근하는 경우


출제 : 문서2-문제25

#### 4.2.1 스프트웨어 테스트 케이스 설계 기법을 설명할 수 있다
* `동등 분할` : 입력범위 나누기. 각 의미있는 구간만 나누면 되는 듯 (굳이 경계값 포함할 필요 없음)  
    문서2 - 문제11
* 

#### 4.2.2 소프트웨어 요구사항, 아키텍처 설계, 상세 설계, 코드를 분석하여 TC를 설계할 수 있다

`분기 커버리지`: 모든 combination할필요 없음. 각 분기만 들른 적이 있으면 됨








### 5.2 위험관리 수행
#### 5.2.1 위험관리의 개념과 활동 설명
- __가능성이 높다__ 위주로 고르면 됨
- 이미 벌어진 일 = 이슈와는 구분해야 함. ex - 현재 프로젝트 진행율이 3% 지연 -> 위험관리 대상이 아니라고 함 (ㅡㅡ;)
- 대응책이 있는 것도 제외

출제 : 문서2 문제13


#### 5.2.2 결함관리의 개념과 활동을 설명할 수 있다


`인스펙션`
- 계획(장소/참여자) - 준비(__사전검토__ 필수. 교육 등) - 검토회의 (결함 개수/유형 등 식별된 것 기록. 조정자/기록자 있음) - 수정 (결함이 수정되었는지) - 후속
- 출제 : 문서2 문제14














~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~이하 이전 내용~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


소공과목 중간고사 보는 느낌이네 ㅡㅡㅋ

59p V프로세스 외우기

### SW관리

#### 형상관리
> 형상관리의 개념과 활동을 설명  

- 104p
- 동일한 기준으로 개발을 진행하고, 개발 이력을 확보하기 위해서는 개발 산출물들의 `형상` (configuration)관리가 중요 (동일한 기준?)
- why `형상관리`?:
  - 시스템 개발(+유지보수)시 변경이력을 가시화해 통제 \\(\rightarrow\\) 변경 내용을 체계적/일관성있게 (기준 만족!) 시스템에 반영, 시스템 품질보증 & 생산성 향상시킴
- `형상관리 활동`: 식별된 형상 항목들의 `기준선` (baseline) 수립, 변경 추적관리, 기준선의 무결성을 수립 및 유지하는 활동

형상 관리의 정의 - 다음 3가지로 나뉨
1. 기준선 확립: 대상선정/기준선 생성 및 배포/시스템 구축
2. 무결성 확립: 기록 및 감시
3. 변경요청 추적 및 형상 통제: 추적관리 및 통제 

형상 관리를 위해서는 형상관리자/관리시스템/DB가 필요. `형상통제위원회` (Configuration Control Board)가 있어야 한다고 함. 왜 우리회산 없냐

#### 변경관리
> 변경관리의 개념과 활동을 설명

- 105p
- 엔지니어링 산출물 (요구사항, 설계사양, 코드(시스템))은 프로젝트 라이프사이클동안 항상 변함
- 변경이 관리되야 원인파악 / 의사소통이 원활

그림 찰지네  
<img src="{{site.url}}/images/sogong/change_manage.jpg" width="600">


#### 유지보수?
> SW의 유지보수를 위한 개념과 기법을 설명할 수 있다

밑도끝도없네...  
1. 변경관리
2. 품질관리
    - CMMI (품질보증 계획수립, 점검, 평가법에 대한 방법제공)나 오토모티브 SPICE와 같은 성숙 모델을 도입해 개발
    - ISO 9126 / 14598등의 최종제품 품질 평가
3. CI 같은거 말해도 되나. 대충 한두마디 적을거 준비나 해 놓자

### SW 테스팅

#### 테스트 프로세스 적용
> SW테스트 단계별 특징과 수행 환경을 설명할 수 있다

1. SW 단위 검증 (모듈 검증)
    - 조기에 시행 (당연..)
    - 원시 코드를 대상으로 하는 White box테스트를 수행 (왜 블랙박스는 안함?)
    - 단위테스트 전략수립 (...?) -> 테케 설계 및 구현 (boundary case + 실용성 있게) -> 환경 구축 (JUnit등) -> 수행 (코드 / 데이터 테스트, 동적 테스트, 실시간 테스트) -> 결과서 도출 및 정리
2. SW 통합과 검증
    - 통합테스트 전략수립 (빌드환경/툴 등) -> 통합빌드 수행 (컴파일 + 링크, 메모리 배치 (링커)) -> `ASAM` 작성 (튜닝, 캘, 고장진단)
    - 통합 시, 모든 MCU의 프로그렘 버전과 데이터 버전이 명시되고 문서로 만들어져야 함
3. 시스템 통합과 검증
    - 단위요소들 (협력업체들 gather)을 모아 시스템 완성 - 시스템 레벨에서의 요구사항/기능/성능을 만족하는지 테스트 (시험차이기 때문에 제한적 상황임)
    - 통합 테스트, 시스템 테스트, 인수 테스트 (?????) 수행
4. 차량 평가 및 데이터 캘
    - 캘: 성능 보정

#### 테스트 기법 적용
> SW테스트 케이스 설계 기법을 설명할 수 있다.  
  SW요구사항, 아키텍처 설계, 상세 설계, 코드를 분석하여 테스트 케이스를 설계할 수 있다.

이거 책에 없음. 알아서 찾아야 할듯


### SW공학 관리

#### 프로젝트 관리 수행
> 프로젝트 계획 수립 및 조정, 모니터링 활동을 설명할 수 있다

1. `프로젝트 계획 수립`
    * 목적: 프로젝스 수행 전, 개발 `범위`를 결정하고 들어가는 `자원`/`비용`/`일정`을 추정
        1. 범위: 기능/성능/인터페이스/제약 사항 등 서술.
        2. 자원:  인적(직위, 전문성 명시) / 소프트웨어(필요한 라이브러리 유뮤(라이센스) /하드웨어 (호환성 /기능 등 체크)  
            프로젝트 진행 상 필요한 시기에 해당 자원들이 있는지 확인
        3. 노력: 맨먼스
        4. 비용/일정: 위의 것들로 결정 
    * 프로젝트 계획서: __프로젝트 수행의 기준__ 이 되는 계획서를 구체적인 형태로 수립 - R&R을 명확히 정의
    * 착수 단계에서 수립되어야
      * 프로젝트 개요 / 범위 / 방법론 / 산출물 / 수행단계 / 일정 / 조직 / 운영방법 등
      * 큰 마일스톤 / 마일스톤마다의 딜리버러블
2. 조정
    ????
3. 모니터링
    - 이슈 트래커(Jira)를 통한 이슈 모니터링
    - 산출문서 (UML등)의 정기적인 검토?
    - 책 (51-53p)  
        * 자동차 업체들은 개발 모니터링/통제를 위해 개발 프로세스상에 검토(review)/품질감사(audit)/거동평가 등의 확인 측정 단계를 정의
        * FIMA (failure mode and effect analysis)나 초도픔 검사 (ISIR, Initial sample inspection report)를 수행


#### 위험관리 수행
> 위험관리의 개념과 활동을 설명할 수 있다

책 114p부터

> 결함관리의 개념과 활동을 설명할 수 있다

책 126p부터 (`FMEA`)
---
layout: post
title:  "Representational state transfer"
date:   2020-12-17 07:00:05 +0800
categories: coding
use_math: true
tags: coding python
---


*************************************************
<a href="https://meetup.toast.com/posts/92" target="_blank">https://meetup.toast.com/posts/92</a>

- uri에는 collection / element명 만 (동사 X)
- `DOCUMENT`는 단순히 문서로 이해해도 되고, 한 객체라고 이해하셔도 될 것 같습니다. 
- `COLLECTION`은 문서들의 집합, 객체들의 집합이라고 생각하시면 이해하시는데 좀더 편하실 것 같습니다. 컬렉션과 도큐먼트는 모두 리소스라고 표현할 수 있으며 URI에 표현됩니다
  - URI에서 Collection에는 복수형으로 써 주면 좋음
*************************************************

- <a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api" target="_blank">https://www.redhat.com/en/topics/api/what-is-a-rest-api</a>



*************************************************

<a href="https://spoqa.github.io/2012/02/27/rest-introduction.html" target="_blank">https://spoqa.github.io/2012/02/27/rest-introduction.html</a>

<img src="{{site.url}}/images/coding/rest/coll_ele.jpg" width="800">  

- 이 외에도 PATCH 라는 HTTP Method에도 주목하시기 바랍니다. PUT이 해당 자원의 전체를 교체하는 의미를 지니는 대신, PATCH는 일부를 변경한다는 의미를 지니기 때문에 최근 update 이벤트에서 PUT보다 더 의미적으로 적합하다고 평가받고 있습니다. Rails도 4.0부터 PATCH가 update 이벤트의 기본 Method로 사용될 것이라 예고하고 있습니다.
- `FORM`이 뭐지?
- REST 하게 만든다면 URI는 플랫폼 중립적이어야 하며, 정보를 보여줄 때 여러 플랫폼을 구별해야 한다면 __Request Header의 User-Agent__ 값을 참조하는 것이 좋습니다. 예를 들어 iPhone에서 보내주는 User-Agent 값은 아래와 같습니다.
  - `Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3`
  - 대부분 브라우저, OS 플랫폼은 HTTP Request를 보낼 시 보내는 주체에 대한 설명을 User-Agent에 상세하게 포함하여 통신하고 있기 때문에 요청자의 환경을 정확히 알 수 있습니다.
- 버전과 정보 포맷을 지정할 수 있게 해야 한다면?
  - Header의 Accept 헤더를 이용해서 요청 환경에서 정보의 버전과 포맷을 지정할 수 있게 합니다. 아래는 Github API에 요청 시 쓰는 Accept 헤더입니다.  
    `application/vnd.github+json`
  - vnd.는 Vendor MIME Type으로, 서비스 개발자가 자신의 독자적인 포맷을 규정할 수 있게 HTTP 표준에서 제공하는 접두어입니다. vnd. 이후에 서비스 제공자 이름을 쓴 후, +로 문서의 기본 포맷을 표현해줍니다.
  - 이에 더해, Accept 헤더는 파라미터를 받을 수 있습니다. 많은 REST 지지자들은 이 파라미터를 이용해 버전 명을 지정하는 것을 권장합니다.  
    `vnd.example-com.foo+json; version=1.0`

*************************************************


<a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">https://en.wikipedia.org/wiki/Representational_state_transfer</a>

> Representational state transfer (REST) is a __software architectural style that defines a set of constraints__ to be used for creating Web services.

- RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations.
- The GET (read), PUT (create and update), and DELETE (delete) methods are CRUD operations as they have storage management semantics, meaning that they let user agents directly manipulate the states of target resources. The POST method is not a CRUD operation but a process operation that has target-resource-specific semantics excluding storage management semantics, so it does not let user agents directly manipulate the states of target resources
- Unlike SOAP-based web services, there is no "official" standard for RESTful web APIs. This is because REST is an architectural style, while SOAP is a protocol. REST is not a standard in itself, but RESTful implementations make use of standards, such as HTTP, URI, JSON, and XML. Many developers also describe their APIs as being RESTful, even though these APIs actually don't fulfil all of the architectural constraints described above (especially the uniform interface constraint

********************
- <a href="https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html" target="_blank">https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html</a>

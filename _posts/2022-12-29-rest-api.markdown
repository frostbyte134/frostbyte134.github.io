---
layout: post
title:  "API design best practice"
date:   2022-12-29 07:00:05 +0800
categories: coding
use_math: true
tags: coding
---

- 
<a href="https://cloud.google.com/apis/design/resources" target="_blank">google</a> / <a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design" target="_blank">MS</a> design best practice
- <a href="https://deview.kr/2017/schedule/212" target="_blank">그런 REST API로 괜찮은가</a>

### MS API design best practice

https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design

### 그런 REST API로 괜찮은가? (22.12.01 추가)
- 이거 추가하면서 제목을 REST에서 api design으로 바꿈...ㅎㅎ
- https://deview.kr/2017/schedule/212

REST: 분산 하이퍼미디서 시스템 (EX-web)을 위한 아키텍처 스타일
- `아키텍처 스타일`: 제약조건들의 집합
- client-server, stateless, cache, layered system:  HTTP api이기만 해도 대충 잘 지켜짐 
- code-on-demand(optional): 서버에서 클라이언트로 코드를 보내 실행할 수 있어야 함 (자바스크립트?)
- `uniform interface`
  - identification of resources: 식별가능하면 됨
  - manipulation of rsc through representation: 리소스의 CRUD는 HTTP 메시지로 되어야 한다
  - self-descriptive message: 쉽지않네..
  - hypermedia as the engine of app state (HATEOAS)

why uniform interface?
- for seperate evolution of server/client? (reduce cohesion)

Self-descriptive Message
- `Content-Type: application/json-patch+json`: 여기 가면 operation들이 다 정의되어 있는 듯
- 이건 json 파싱 관련만인 것 같은뎨?

HATEOAS
- 앱의 상태천이는 항상 hyperlink를 통해서 되어야 한다 (링크 클릭해서 상태 변화가 되어야 함)
  - 근데 앱 자체의 로컬 상태천이랑 관계가 있나...?
  - 헤더에 LINK를 포함 -> 이걸로 (사용자 입장에서의) 앱의 상티 전이가 되어야 하는 듯 (리소스들을 이동하면서?)
  - HTML - 메시지 자체에 a태그로 들어간 링크도 천이로 치는 듯
  - 동적인 링크 변경이 가능 (서버가 링크 구조를 바꿔도 클라이언트는 메시지마다 링크를 보고 따라가면 됨)

웹페이지는 rest를 잘 만족함
- 상태천이도
- seperate evol도 

REST API (by Roy T. Fielding)
> An API that provides network-based access to resources via a uniform interace of self-descriptive msgs containing hypertext to indicate potential state transitions might be part of an overall system that is RESTful application

버저닝 예기는 왜 있는 거지? - 이 방법대로라면 굳이 버저닝은 필요없다는 걸 말하고 싶은 듯...?

If you can control entire system (cli-server), or not interested in independent evolution
- no need to apply REST architecture


내가 만든 HTTP API는?...
- ex) APP은 breaking change가 꽤 많음. 웹은 이런 게 없음
- 엄밀히 말하면 앱이 rest하지 않아서 = rest 아키텍처 스타일을 따르지 않아서
- 웹은 잘 되는데 왜 앱은 REST가 잘 안되나?

| .  | 웹페이지 | 앱 |
| ------------- | ------------- | ------------- |
| 프로토콜  | HTTP  | HTTP  |
| COMM  | Human-Machine  | machine to machine  |
| media type  | HTML  | JSON  |

| .  | HTML  | JSON  |
| ------------- | ------------- | ------------- |
| hyperlink  | well defined (a tag,...)  | Nonedefined  |
| self-descriptive  | good  | 어떻게 파싱해야 하는지만 있음. 각 필드의 의미 등은 불명 |

미디어 타입 (app/json, app/html) - IANA에 해석 방법이 등록되어 있다고 함
- json은 self-described field name (ex - "id", "title", ...)을 해석할 방법을 IANA에 등록해야 함...ㅜㅜ
- IANA에 등록하기 싫으면, 명세를 작성한 곳 링크를 Link 헤더에 `Profile relation`으로 찾아가기
  - content negotiation이 불가능? 해석 안될 때 답이 없다는 듯

HATEOS
- json에 링크를 박아놔도 되긴 하는데, 어떤 필드가 link인지를 정의안했긴 함 ㅋㅋ


PPT의 정리
- 오늘 대부분의 자칭 REST API는 REST하지 않다
  - 특히 그 중 HATEOS와 self descriptive를 만족시키지 못한다
- REST는 긴 시간 독립적으로 (low cohesion)진화하는 웹 앱을 위한 것이다. 아니면 신경X
  - 강요X. 따를지 말지, 어디까지 따를지는 개발자들이 스스로 결정
- 따르겠다면 self-descriptive, hateos를 만족시켜야 함
  - json/self descriptive - custom media type / profile link relation으로)
  - hateos - 헤더나 본문에 링크 박기?

### Google Cloud Best Practice
<a href="https://cloud.google.com/apis/design/resources" target="_blank">https://cloud.google.com/apis/design/resources</a>
- Its core principle is to define named resources that can be manipulated using a small number of methods
- __The resources and methods are known as nouns and verbs of APIs.__
   - With the HTTP protocol, the resource names naturally map to URLs, and methods naturally map to HTTP methods POST, GET, PUT, PATCH, and DELETE


### What is REST API
`A REST API` is modeled as collections of individually-addressable resources (the nouns of the API).  
Resources are referenced with their resource names and manipulated via a small set of methods (also known as verbs or operations).

### Resources
A resource-oriented API is generally modeled as a resource hierarchy, where
- each node is either a simple resource or a collection resource. (`resource` and a `collection`)
- A collection contains a list of resources of the same type. ex) a user has a collection of contacts.
   - A resource has some `state` and zero or more `sub-resources`. Each sub-resource can be either a resource or a collection.


While there is some conceptual alignment between storage systems and REST APIs, a service with a resource-oriented API is not necessarily a database (APIs are more flexible, inter-connected, does more than storing)


### Methods
-  resource-oriented API emphasizes resources (`data model`) over the methods performed on the resources (`functionality`)
- A typical resource-oriented API exposes a large number of resources with a small number of methods
- Where API functionality naturally maps to one of the standard methods, that method should be used in the API design (if not, one can use custom method)

### Resource Names
- In resource-oriented APIs, resources are named entities, and resource names are their identifiers. 
- Each resource must have its own unique resource name. The resource name is made up of the ID of the resource itself, the IDs of any parent resources, and its API service name
- A collection is a special kind of resource that contains a list of sub-resources of identical type. For example, a directory is a collection of file resources. The resource ID for a collection is called collection ID.
- ex) `/storage.googleapis.com/buckets/<bucket-id>/objects/<object-id>`
- API Service Name/Collection ID/Resource ID/Collection ID/Resource ID

### Resource / Collection ID
- Resource IDs must be clearly documented whether they are assigned by the client, the server, or either. For example, file names are typically assigned by clients, while email message IDs are typically assigned by servers.
- Must be valid C/C++ identifiers
- Must be in plural form with lowerCamel case. If the term doesn't have suitable plural form, such as "evidence" and "weather", the singular form should be used.
- Overly general terms should be avoided or qualified. For example, rowValues is preferred to values. The following terms should be avoided without qualification:
   - elements, entries, instances, items, objects, resources, types, values


### standard methods
- https://cloud.google.com/apis/design/standard_methods

### stadard field names
- https://cloud.google.com/apis/design/standard_fields


### Glossaries
- https://cloud.google.com/apis/design/glossary





*************************************************
<a href="https://meetup.toast.com/posts/92" target="_blank">https://meetup.toast.com/posts/92</a>

- uri에는 collection / element명 만 (동사 X)
- `DOCUMENT`는 단순히 문서로 이해해도 되고, 한 객체라고 이해하셔도 될 것 같습니다. 
- `COLLECTION`은 문서들의 집합, 객체들의 집합이라고 생각하시면 이해하시는데 좀더 편하실 것 같습니다. 컬렉션과 도큐먼트는 모두 리소스라고 표현할 수 있으며 URI에 표현됩니다
  - URI에서 Collection에는 복수형으로 써 주면 좋음
*************************************************

- <a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api" target="_blank">https://www.redhat.com/en/topics/api/what-is-a-rest-api</a>



*************************************************

<a href="https://spoqa.github.io/2012/02/27/rest-introduction.html" target="_blank">https://spoqa.github.io/2012/02/27/rest-introduction.html</a>

<img src="{{site.url}}/images/coding/rest/coll_ele.jpg" width="800">  

- 이 외에도 PATCH 라는 HTTP Method에도 주목하시기 바랍니다. PUT이 해당 자원의 전체를 교체하는 의미를 지니는 대신, PATCH는 일부를 변경한다는 의미를 지니기 때문에 최근 update 이벤트에서 PUT보다 더 의미적으로 적합하다고 평가받고 있습니다. Rails도 4.0부터 PATCH가 update 이벤트의 기본 Method로 사용될 것이라 예고하고 있습니다.
- `FORM`이 뭐지?
- REST 하게 만든다면 URI는 플랫폼 중립적이어야 하며, 정보를 보여줄 때 여러 플랫폼을 구별해야 한다면 __Request Header의 User-Agent__ 값을 참조하는 것이 좋습니다. 예를 들어 iPhone에서 보내주는 User-Agent 값은 아래와 같습니다.
  - `Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3`
  - 대부분 브라우저, OS 플랫폼은 HTTP Request를 보낼 시 보내는 주체에 대한 설명을 User-Agent에 상세하게 포함하여 통신하고 있기 때문에 요청자의 환경을 정확히 알 수 있습니다.
- 버전과 정보 포맷을 지정할 수 있게 해야 한다면?
  - Header의 Accept 헤더를 이용해서 요청 환경에서 정보의 버전과 포맷을 지정할 수 있게 합니다. 아래는 Github API에 요청 시 쓰는 Accept 헤더입니다.  
    `application/vnd.github+json`
  - vnd.는 Vendor MIME Type으로, 서비스 개발자가 자신의 독자적인 포맷을 규정할 수 있게 HTTP 표준에서 제공하는 접두어입니다. vnd. 이후에 서비스 제공자 이름을 쓴 후, +로 문서의 기본 포맷을 표현해줍니다.
  - 이에 더해, Accept 헤더는 파라미터를 받을 수 있습니다. 많은 REST 지지자들은 이 파라미터를 이용해 버전 명을 지정하는 것을 권장합니다.  
    `vnd.example-com.foo+json; version=1.0`

*************************************************


<a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">https://en.wikipedia.org/wiki/Representational_state_transfer</a>

> Representational state transfer (REST) is a __software architectural style that defines a set of constraints__ to be used for creating Web services.

- RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations.
- The GET (read), PUT (create and update), and DELETE (delete) methods are CRUD operations as they have storage management semantics, meaning that they let user agents directly manipulate the states of target resources. The POST method is not a CRUD operation but a process operation that has target-resource-specific semantics excluding storage management semantics, so it does not let user agents directly manipulate the states of target resources
- Unlike SOAP-based web services, there is no "official" standard for RESTful web APIs. This is because REST is an architectural style, while SOAP is a protocol. REST is not a standard in itself, but RESTful implementations make use of standards, such as HTTP, URI, JSON, and XML. Many developers also describe their APIs as being RESTful, even though these APIs actually don't fulfil all of the architectural constraints described above (especially the uniform interface constraint

********************
- <a href="https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html" target="_blank">https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html</a>
